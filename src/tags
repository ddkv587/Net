!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BASE_LOG_SEVERITY_H__	.recy/log/glog/log_severity.h	31;"	d
BASE_RAW_LOGGING_H_	.recy/log/glog/raw_logging.h	37;"	d
BASE_VLOG_IS_ON_H_	.recy/log/glog/vlog_is_on.h	62;"	d
BOOLEAN	core/platform/TypeDefine.hpp	/^	typedef 	bool			BOOLEAN;$/;"	t	namespace:NET
BYTE	core/platform/TypeDefine.hpp	/^	typedef 	UINT8			BYTE;$/;"	t	namespace:NET
CConfig	core/config/Config.cpp	/^	CConfig::CConfig()$/;"	f	class:NET::CConfig
CHAR	core/platform/TypeDefine.hpp	/^	typedef 	char 			CHAR;$/;"	t	namespace:NET
CHECK	.recy/log/glog/logging.h	584;"	d
CHECK_BOUND	.recy/log/glog/logging.h	834;"	d
CHECK_DOUBLE_EQ	.recy/log/glog/logging.h	836;"	d
CHECK_EQ	.recy/log/glog/logging.h	788;"	d
CHECK_ERR	.recy/log/glog/logging.h	879;"	d
CHECK_GE	.recy/log/glog/logging.h	792;"	d
CHECK_GT	.recy/log/glog/logging.h	793;"	d
CHECK_INDEX	.recy/log/glog/logging.h	833;"	d
CHECK_LE	.recy/log/glog/logging.h	790;"	d
CHECK_LT	.recy/log/glog/logging.h	791;"	d
CHECK_NE	.recy/log/glog/logging.h	789;"	d
CHECK_NEAR	.recy/log/glog/logging.h	842;"	d
CHECK_NOTNULL	.recy/log/glog/logging.h	798;"	d
CHECK_OP	.recy/log/glog/logging.h	763;"	d
CHECK_OP_LOG	.recy/log/glog/logging.h	730;"	d
CHECK_R	core/platform/TypeDefine.hpp	34;"	d
CHECK_STRCASEEQ	.recy/log/glog/logging.h	830;"	d
CHECK_STRCASENE	.recy/log/glog/logging.h	831;"	d
CHECK_STREQ	.recy/log/glog/logging.h	828;"	d
CHECK_STRNE	.recy/log/glog/logging.h	829;"	d
CHECK_STROP	.recy/log/glog/logging.h	814;"	d
CListener	listener/Listener.cpp	/^	CListener::CListener()$/;"	f	class:NET::CListener
CListener	listener/Listener.hpp	/^	class CListener : public CThreadBase $/;"	c	namespace:NET
CLoadHelper	core/loadHelper/CLoadHelper.hpp	/^class CLoadHelper$/;"	c
CLog	core/log/Log.hpp	/^	class CLog $/;"	c	namespace:NET
CMain	native/CMain.cpp	/^	CMain::CMain()$/;"	f	class:NET::CMain
CMain	native/CMain.hpp	/^	class CMain : public CThreadBase$/;"	c	namespace:NET
CMultiBase	core/platform/multiplex/MultiBase.cpp	/^	CMultiBase::CMultiBase()$/;"	f	class:NET::CMultiBase
CMultiBase	core/platform/multiplex/MultiBase.hpp	/^	class CMultiBase$/;"	c	namespace:NET
CMultiEpoll	core/platform/multiplex/MultiEpoll.cpp	/^	CMultiEpoll::CMultiEpoll()$/;"	f	class:NET::CMultiEpoll
CMultiEpoll	core/platform/multiplex/MultiEpoll.hpp	/^	class CMultiEpoll : public CMultiBase$/;"	c	namespace:NET
CMultiKqueue	core/platform/multiplex/MultiKqueue.cpp	/^CMultiKqueue::CMultiKqueue(int size)$/;"	f	class:CMultiKqueue
CMultiKqueue	core/platform/multiplex/MultiKqueue.hpp	/^class CMultiKqueue : IMultiplex$/;"	c
CMultiSelect	core/platform/multiplex/MultiSelect.hpp	/^	class CMultiSelect : public CMultiBase$/;"	c	namespace:NET
COMPACT_GOOGLE_LOG_0	.recy/log/glog/logging.h	961;"	d
COMPACT_GOOGLE_LOG_0	.recy/log/glog/logging.h	972;"	d
COMPACT_GOOGLE_LOG_DFATAL	.recy/log/glog/logging.h	443;"	d
COMPACT_GOOGLE_LOG_DFATAL	.recy/log/glog/logging.h	445;"	d
COMPACT_GOOGLE_LOG_DFATAL	.recy/log/glog/logging.h	448;"	d
COMPACT_GOOGLE_LOG_ERROR	.recy/log/glog/logging.h	415;"	d
COMPACT_GOOGLE_LOG_ERROR	.recy/log/glog/logging.h	420;"	d
COMPACT_GOOGLE_LOG_FATAL	.recy/log/glog/logging.h	425;"	d
COMPACT_GOOGLE_LOG_FATAL	.recy/log/glog/logging.h	430;"	d
COMPACT_GOOGLE_LOG_INFO	.recy/log/glog/logging.h	395;"	d
COMPACT_GOOGLE_LOG_INFO	.recy/log/glog/logging.h	400;"	d
COMPACT_GOOGLE_LOG_WARNING	.recy/log/glog/logging.h	405;"	d
COMPACT_GOOGLE_LOG_WARNING	.recy/log/glog/logging.h	410;"	d
CONFIG_PATH	native/CMain.cpp	3;"	d	file:
CONFIG_PATH_BAK	native/CMain.cpp	4;"	d	file:
CONNECT_CLIENT	client/client.cpp	10;"	d	file:
COUNTER	.recy/log/glog/logging.h	/^enum PRIVATE_Counter {COUNTER};$/;"	e	enum:google::PRIVATE_Counter
CPP_INCLUDE	core/log/makefile	/^CPP_INCLUDE		:= -I$(ROOT_PATH) \\$/;"	m
CPP_INCLUDE	core/platform/multiplex/makefile	/^CPP_INCLUDE		:= -I$(ROOT_PATH) \\$/;"	m
CPP_INCLUDE	core/socket/makefile	/^CPP_INCLUDE		:= -I$(ROOT_PATH) \\$/;"	m
CPP_SRC	core/log/makefile	/^CPP_SRC			:= $(shell find $(CPP_SRCDIR) -name "*.cpp")$/;"	m
CPP_SRC	core/platform/multiplex/makefile	/^CPP_SRC			:= $(shell find $(CPP_SRCDIR) -name "*.cpp")$/;"	m
CPP_SRC	core/socket/makefile	/^CPP_SRC			:= $(shell find $(CPP_SRCDIR) -name "*.cpp")$/;"	m
CPP_SRCDIR	core/log/makefile	/^CPP_SRCDIR		:= $(shell pwd)$/;"	m
CPP_SRCDIR	core/platform/multiplex/makefile	/^CPP_SRCDIR		:= $(shell pwd)$/;"	m
CPP_SRCDIR	core/socket/makefile	/^CPP_SRCDIR		:= $(shell pwd)$/;"	m
CProcessor	processor/Processor.cpp	/^	CProcessor::CProcessor()$/;"	f	class:NET::CProcessor
CProcessor	processor/Processor.hpp	/^	class CProcessor : public CThreadBase, public IFileListener$/;"	c	namespace:NET
CProtocolBase	protocol/ProtocolBase.cpp	/^	CProtocolBase::CProtocolBase()$/;"	f	class:NET::CProtocolBase
CProtocolBase	protocol/ProtocolBase.hpp	/^	class CProtocolBase : public IProtocol $/;"	c	namespace:NET
CSocket	core/socket/Socket.cpp	/^	CSocket::CSocket()$/;"	f	class:NET::CSocket
CSocket	core/socket/Socket.hpp	/^	class CSocket$/;"	c	namespace:NET
CSocketServer	core/socket/SocketServer.cpp	/^	CSocketServer::CSocketServer()$/;"	f	class:NET::CSocketServer
CSocketServer	core/socket/SocketServer.hpp	/^	class CSocketServer : public CSocket$/;"	c	namespace:NET
CThreadBase	core/thread/ThreadBase.hpp	/^		CThreadBase()$/;"	f	class:NET::CThreadBase
CThreadBase	core/thread/ThreadBase.hpp	/^	class CThreadBase$/;"	c	namespace:NET
CheckNotNull	.recy/log/glog/logging.h	/^T CheckNotNull(const char* file, int line, const char* names, T&& t) {$/;"	f	namespace:google
CheckNotNull	.recy/log/glog/logging.h	/^T* CheckNotNull(const char *file, int line, const char *names, T* t) {$/;"	f	namespace:google
CheckOpMessageBuilder	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL CheckOpMessageBuilder {$/;"	c	namespace:google::base
CheckOpString	.recy/log/glog/logging.h	/^  CheckOpString(std::string* str) : str_(str) { }$/;"	f	struct:google::CheckOpString
CheckOpString	.recy/log/glog/logging.h	/^struct CheckOpString {$/;"	s	namespace:google
CompileAssert	.recy/log/glog/logging.h	/^struct CompileAssert {$/;"	s	namespace:google::glog_internal_namespace_
DCHECK	.recy/log/glog/logging.h	1026;"	d
DCHECK	.recy/log/glog/logging.h	991;"	d
DCHECK_EQ	.recy/log/glog/logging.h	1031;"	d
DCHECK_EQ	.recy/log/glog/logging.h	992;"	d
DCHECK_GE	.recy/log/glog/logging.h	1051;"	d
DCHECK_GE	.recy/log/glog/logging.h	996;"	d
DCHECK_GT	.recy/log/glog/logging.h	1056;"	d
DCHECK_GT	.recy/log/glog/logging.h	997;"	d
DCHECK_IS_ON	.recy/log/glog/logging.h	435;"	d
DCHECK_IS_ON	.recy/log/glog/logging.h	437;"	d
DCHECK_LE	.recy/log/glog/logging.h	1041;"	d
DCHECK_LE	.recy/log/glog/logging.h	994;"	d
DCHECK_LT	.recy/log/glog/logging.h	1046;"	d
DCHECK_LT	.recy/log/glog/logging.h	995;"	d
DCHECK_NE	.recy/log/glog/logging.h	1036;"	d
DCHECK_NE	.recy/log/glog/logging.h	993;"	d
DCHECK_NOTNULL	.recy/log/glog/logging.h	1063;"	d
DCHECK_NOTNULL	.recy/log/glog/logging.h	998;"	d
DCHECK_STRCASEEQ	.recy/log/glog/logging.h	1000;"	d
DCHECK_STRCASEEQ	.recy/log/glog/logging.h	1070;"	d
DCHECK_STRCASENE	.recy/log/glog/logging.h	1002;"	d
DCHECK_STRCASENE	.recy/log/glog/logging.h	1080;"	d
DCHECK_STREQ	.recy/log/glog/logging.h	1065;"	d
DCHECK_STREQ	.recy/log/glog/logging.h	999;"	d
DCHECK_STRNE	.recy/log/glog/logging.h	1001;"	d
DCHECK_STRNE	.recy/log/glog/logging.h	1075;"	d
DEBUG_MODE	.recy/log/glog/log_severity.h	/^enum { DEBUG_MODE = 0 };$/;"	e	enum:__anon2
DEBUG_MODE	.recy/log/glog/log_severity.h	/^enum { DEBUG_MODE = 1 };$/;"	e	enum:__anon3
DECLARE_CHECK_STROP_IMPL	.recy/log/glog/logging.h	803;"	d
DECLARE_CHECK_STROP_IMPL	.recy/log/glog/logging.h	810;"	d
DECLARE_VARIABLE	.recy/log/glog/logging.h	310;"	d
DECLARE_VARIABLE	.recy/log/glog/logging.h	381;"	d
DECLARE_bool	.recy/log/glog/logging.h	317;"	d
DECLARE_bool	.recy/log/glog/logging.h	382;"	d
DECLARE_int32	.recy/log/glog/logging.h	321;"	d
DECLARE_int32	.recy/log/glog/logging.h	383;"	d
DECLARE_string	.recy/log/glog/logging.h	326;"	d
DECLARE_string	.recy/log/glog/logging.h	384;"	d
DEFINE_CHECK_OP_IMPL	.recy/log/glog/logging.h	702;"	d
DEFINE_CHECK_OP_IMPL	.recy/log/glog/logging.h	723;"	d
DEFINE_ONCE	.recy/common.h	6;"	d
DFATAL_LEVEL	.recy/log/glog/log_severity.h	59;"	d
DFATAL_LEVEL	.recy/log/glog/log_severity.h	61;"	d
DLOG	.recy/log/glog/logging.h	1006;"	d
DLOG	.recy/log/glog/logging.h	982;"	d
DLOG_ASSERT	.recy/log/glog/logging.h	1022;"	d
DLOG_ASSERT	.recy/log/glog/logging.h	988;"	d
DLOG_EVERY_N	.recy/log/glog/logging.h	1016;"	d
DLOG_EVERY_N	.recy/log/glog/logging.h	985;"	d
DLOG_IF	.recy/log/glog/logging.h	1013;"	d
DLOG_IF	.recy/log/glog/logging.h	984;"	d
DLOG_IF_EVERY_N	.recy/log/glog/logging.h	1019;"	d
DLOG_IF_EVERY_N	.recy/log/glog/logging.h	986;"	d
DOUBLE	core/platform/TypeDefine.hpp	/^	typedef 	double			DOUBLE;$/;"	t	namespace:NET
DVLOG	.recy/log/glog/logging.h	1009;"	d
DVLOG	.recy/log/glog/logging.h	983;"	d
DummyClassToDefineOperator	.recy/log/glog/logging.h	/^struct DummyClassToDefineOperator {};$/;"	s	namespace:google
EMT_EPOLL	core/platform/multiplex/MultiBase.hpp	/^				EMT_EPOLL,$/;"	e	enum:NET::CMultiBase::EMultiType
EMT_KQUEUE	core/platform/multiplex/MultiBase.hpp	/^				EMT_KQUEUE,$/;"	e	enum:NET::CMultiBase::EMultiType
EMT_NONE	core/platform/multiplex/MultiBase.hpp	/^				EMT_NONE = -1,$/;"	e	enum:NET::CMultiBase::EMultiType
EMT_SELECT	core/platform/multiplex/MultiBase.hpp	/^				EMT_SELECT,$/;"	e	enum:NET::CMultiBase::EMultiType
EMultiType	core/platform/multiplex/MultiBase.hpp	/^			enum EMultiType$/;"	g	class:NET::CMultiBase
ENCODING_UTF16	core/format/XMLHelper.hpp	/^				ENCODING_UTF16,$/;"	e	enum:NET::XMLHelper::XMLEncoding
ENCODING_UTF8	core/format/XMLHelper.hpp	/^				ENCODING_UTF8,$/;"	e	enum:NET::XMLHelper::XMLEncoding
EP_DISMISS	client/Protocol.hpp	/^	EP_DISMISS,$/;"	e	enum:EProcotol
EP_DISMISS	protocol/ProtocolBase.hpp	/^				EP_DISMISS,$/;"	e	enum:NET::CProtocolBase::EProcotol
EP_ECHO	client/Protocol.hpp	/^	EP_ECHO,$/;"	e	enum:EProcotol
EP_ECHO	protocol/ProtocolBase.hpp	/^				EP_ECHO,$/;"	e	enum:NET::CProtocolBase::EProcotol
EP_HEART	client/Protocol.hpp	/^	EP_HEART,$/;"	e	enum:EProcotol
EP_HEART	protocol/ProtocolBase.hpp	/^				EP_HEART,$/;"	e	enum:NET::CProtocolBase::EProcotol
EP_INVALID	client/Protocol.hpp	/^	EP_INVALID = 0,$/;"	e	enum:EProcotol
EP_INVALID	protocol/ProtocolBase.hpp	/^				EP_INVALID = 0,$/;"	e	enum:NET::CProtocolBase::EProcotol
EP_MAX	client/Protocol.hpp	/^	EP_MAX$/;"	e	enum:EProcotol
EP_MAX	protocol/ProtocolBase.hpp	/^				EP_MAX$/;"	e	enum:NET::CProtocolBase::EProcotol
EP_PING	client/Protocol.hpp	/^	EP_PING,$/;"	e	enum:EProcotol
EP_PING	protocol/ProtocolBase.hpp	/^				EP_PING,$/;"	e	enum:NET::CProtocolBase::EProcotol
EP_TIME	client/Protocol.hpp	/^	EP_TIME,$/;"	e	enum:EProcotol
EP_TIME	protocol/ProtocolBase.hpp	/^				EP_TIME,$/;"	e	enum:NET::CProtocolBase::EProcotol
EProcotol	client/Protocol.hpp	/^enum EProcotol$/;"	g
EProcotol	protocol/ProtocolBase.hpp	/^			enum EProcotol$/;"	g	class:NET::CProtocolBase
ERROR	.recy/log/glog/log_severity.h	/^  ERROR = GLOG_ERROR, FATAL = GLOG_FATAL;$/;"	v
EVENT_LOOP	core/platform/multiplex/TypeDef.hpp	/^	} EVENT_LOOP;$/;"	t	namespace:NET	typeref:struct:NET::tagEventLoop
ErrnoLogMessage	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL ErrnoLogMessage : public LogMessage {$/;"	c	namespace:google
FALSE	core/platform/TypeDefine.hpp	29;"	d
FATAL	.recy/log/glog/log_severity.h	/^  ERROR = GLOG_ERROR, FATAL = GLOG_FATAL;$/;"	v
FILE_EVENT	core/platform/multiplex/TypeDef.hpp	/^	} FILE_EVENT;$/;"	t	namespace:NET	typeref:struct:NET::tagFileEvent
FIRED_EVENT	core/platform/multiplex/TypeDef.hpp	/^	} FIRED_EVENT;$/;"	t	namespace:NET	typeref:struct:NET::tagFiredEvent
FLOAT	core/platform/TypeDefine.hpp	/^	typedef 	float			FLOAT;$/;"	t	namespace:NET
ForVar1	.recy/log/glog/logging.h	/^  std::ostream* ForVar1() { return stream_; }$/;"	f	class:google::base::CheckOpMessageBuilder
GLOG_0	.recy/log/glog/logging.h	/^const LogSeverity GLOG_0 = GLOG_ERROR;$/;"	m	namespace:google
GLOG_0	.recy/log/glog/logging.h	975;"	d
GLOG_ERROR	.recy/log/glog/log_severity.h	/^const int GLOG_INFO = 0, GLOG_WARNING = 1, GLOG_ERROR = 2, GLOG_FATAL = 3,$/;"	v
GLOG_ERROR_MSG	.recy/log/glog/logging.h	971;"	d
GLOG_FATAL	.recy/log/glog/log_severity.h	/^const int GLOG_INFO = 0, GLOG_WARNING = 1, GLOG_ERROR = 2, GLOG_FATAL = 3,$/;"	v
GLOG_INFO	.recy/log/glog/log_severity.h	/^const int GLOG_INFO = 0, GLOG_WARNING = 1, GLOG_ERROR = 2, GLOG_FATAL = 3,$/;"	v
GLOG_MSVC_POP_WARNING	.recy/log/glog/logging.h	54;"	d
GLOG_MSVC_POP_WARNING	.recy/log/glog/logging.h	57;"	d
GLOG_MSVC_PUSH_DISABLE_WARNING	.recy/log/glog/logging.h	52;"	d
GLOG_MSVC_PUSH_DISABLE_WARNING	.recy/log/glog/logging.h	56;"	d
GLOG_WARNING	.recy/log/glog/log_severity.h	/^const int GLOG_INFO = 0, GLOG_WARNING = 1, GLOG_ERROR = 2, GLOG_FATAL = 3,$/;"	v
GOOGLE_GLOG_DLL_DECL	.recy/log/glog/log_severity.h	36;"	d
GOOGLE_GLOG_DLL_DECL	.recy/log/glog/log_severity.h	38;"	d
GOOGLE_GLOG_DLL_DECL	.recy/log/glog/logging.h	63;"	d
GOOGLE_GLOG_DLL_DECL	.recy/log/glog/logging.h	65;"	d
GOOGLE_GLOG_DLL_DECL	.recy/log/glog/raw_logging.h	49;"	d
GOOGLE_GLOG_DLL_DECL	.recy/log/glog/vlog_is_on.h	69;"	d
GOOGLE_GLOG_DLL_DECL	.recy/log/glog/vlog_is_on.h	71;"	d
GOOGLE_LOG_DFATAL	.recy/log/glog/logging.h	473;"	d
GOOGLE_LOG_ERROR	.recy/log/glog/logging.h	461;"	d
GOOGLE_LOG_FATAL	.recy/log/glog/logging.h	467;"	d
GOOGLE_LOG_INFO	.recy/log/glog/logging.h	451;"	d
GOOGLE_LOG_WARNING	.recy/log/glog/logging.h	455;"	d
GOOGLE_PLOG	.recy/log/glog/logging.h	856;"	d
GOOGLE_PREDICT_BRANCH_NOT_TAKEN	.recy/log/glog/logging.h	132;"	d
GOOGLE_PREDICT_FALSE	.recy/log/glog/logging.h	140;"	d
GOOGLE_PREDICT_TRUE	.recy/log/glog/logging.h	148;"	d
GOOGLE_STRIP_LOG	.recy/log/glog/logging.h	122;"	d
GetReferenceableValue	.recy/log/glog/logging.h	/^inline char           GetReferenceableValue(char               t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline const T&       GetReferenceableValue(const T&           t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline int            GetReferenceableValue(int                t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline long           GetReferenceableValue(long               t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline long long      GetReferenceableValue(long long          t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline short          GetReferenceableValue(short              t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline signed char    GetReferenceableValue(signed char        t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline unsigned char  GetReferenceableValue(unsigned char      t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline unsigned int   GetReferenceableValue(unsigned int       t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline unsigned long  GetReferenceableValue(unsigned long      t) { return t; }$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline unsigned long long GetReferenceableValue(unsigned long long t) {$/;"	f	namespace:google
GetReferenceableValue	.recy/log/glog/logging.h	/^inline unsigned short GetReferenceableValue(unsigned short     t) { return t; }$/;"	f	namespace:google
HEADER_MANAGER	client/Protocol.hpp	/^} HEADER_MANAGER;$/;"	t	typeref:struct:tagSocketHeader
HEADER_MANAGER	protocol/IProtocol.hpp	/^		} HEADER_MANAGER;$/;"	t	class:NET::IProtocol	typeref:struct:NET::IProtocol::tagSocketHeader
HEART_MANAGER	client/Protocol.hpp	/^} HEART_MANAGER;$/;"	t	typeref:struct:tagSocketHeart
HEART_MANAGER	protocol/ProtocolBase.hpp	/^			} HEART_MANAGER;$/;"	t	class:NET::CProtocolBase	typeref:struct:NET::CProtocolBase::tagSocketHeart
IF_DEBUG_MODE	.recy/log/glog/log_severity.h	86;"	d
IF_DEBUG_MODE	.recy/log/glog/log_severity.h	89;"	d
IFileListener	listener/IFileListener.hpp	/^class IFileListener$/;"	c
INFO	.recy/log/glog/log_severity.h	/^const int INFO = GLOG_INFO, WARNING = GLOG_WARNING,$/;"	v
INT	core/platform/TypeDefine.hpp	/^	typedef		int32_t			INT;$/;"	t	namespace:NET
INT16	core/platform/TypeDefine.hpp	/^	typedef		int16_t			INT16;$/;"	t	namespace:NET
INT64	core/platform/TypeDefine.hpp	/^	typedef		int64_t			INT64;$/;"	t	namespace:NET
INT8	core/platform/TypeDefine.hpp	/^	typedef		int8_t			INT8;$/;"	t	namespace:NET
IProtocol	protocol/IProtocol.hpp	/^	class IProtocol$/;"	c	namespace:NET
LLONG	core/platform/TypeDefine.hpp	/^	typedef 	INT64			LLONG;$/;"	t	namespace:NET
LL_ERROR	core/log/Log.hpp	/^				LL_ERROR,$/;"	e	enum:NET::CLog::LOG_LEVEL
LL_FATAL	core/log/Log.hpp	/^				LL_FATAL,$/;"	e	enum:NET::CLog::LOG_LEVEL
LL_INFO	core/log/Log.hpp	/^				LL_INFO,$/;"	e	enum:NET::CLog::LOG_LEVEL
LL_WARNING	core/log/Log.hpp	/^				LL_WARNING,$/;"	e	enum:NET::CLog::LOG_LEVEL
LOG	.recy/log/glog/logging.h	506;"	d
LOG_ASSERT	.recy/log/glog/logging.h	575;"	d
LOG_AT_LEVEL	.recy/log/glog/logging.h	1307;"	d
LOG_EVERY_N	.recy/log/glog/logging.h	938;"	d
LOG_EVERY_N_VARNAME	.recy/log/glog/logging.h	885;"	d
LOG_EVERY_N_VARNAME_CONCAT	.recy/log/glog/logging.h	886;"	d
LOG_FIRST_N	.recy/log/glog/logging.h	947;"	d
LOG_IF	.recy/log/glog/logging.h	570;"	d
LOG_IF_EVERY_N	.recy/log/glog/logging.h	950;"	d
LOG_LEVEL	core/log/Log.hpp	/^			enum LOG_LEVEL$/;"	g	class:NET::CLog
LOG_OCCURRENCES	.recy/log/glog/logging.h	888;"	d
LOG_OCCURRENCES_MOD_N	.recy/log/glog/logging.h	889;"	d
LOG_STRING	.recy/log/glog/logging.h	567;"	d
LOG_SYSRESULT	.recy/log/glog/logging.h	482;"	d
LOG_TO_SINK	.recy/log/glog/logging.h	535;"	d
LOG_TO_SINK_BUT_NOT_TO_LOGFILE	.recy/log/glog/logging.h	540;"	d
LOG_TO_STRING	.recy/log/glog/logging.h	556;"	d
LOG_TO_STRING_0	.recy/log/glog/logging.h	963;"	d
LOG_TO_STRING_0	.recy/log/glog/logging.h	974;"	d
LOG_TO_STRING_ERROR	.recy/log/glog/logging.h	417;"	d
LOG_TO_STRING_ERROR	.recy/log/glog/logging.h	421;"	d
LOG_TO_STRING_FATAL	.recy/log/glog/logging.h	427;"	d
LOG_TO_STRING_FATAL	.recy/log/glog/logging.h	431;"	d
LOG_TO_STRING_INFO	.recy/log/glog/logging.h	397;"	d
LOG_TO_STRING_INFO	.recy/log/glog/logging.h	401;"	d
LOG_TO_STRING_WARNING	.recy/log/glog/logging.h	407;"	d
LOG_TO_STRING_WARNING	.recy/log/glog/logging.h	411;"	d
LONG	core/platform/TypeDefine.hpp	/^	typedef 	INT64			LONG;$/;"	t	namespace:NET
LogAtLevel	.recy/log/glog/logging.h	/^inline void LogAtLevel(int const severity, std::string const &msg) {$/;"	f	namespace:google
LogMessage	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL LogMessage {$/;"	c	namespace:google
LogMessageFatal	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL LogMessageFatal : public LogMessage {$/;"	c	namespace:google
LogMessageVoidify	.recy/log/glog/logging.h	/^  LogMessageVoidify() { }$/;"	f	class:google::LogMessageVoidify
LogMessageVoidify	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL LogMessageVoidify {$/;"	c	namespace:google
LogSeverity	.recy/log/glog/log_severity.h	/^typedef int LogSeverity;$/;"	t
LogSink	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL LogSink {$/;"	c	namespace:google
LogStream	.recy/log/glog/logging.h	/^    LogStream(char *buf, int len, int ctr)$/;"	f	class:google::LogMessage::LogStream
LogStream	.recy/log/glog/logging.h	/^  class GOOGLE_GLOG_DLL_DECL LogStream : public std::ostream {$/;"	c	class:google::LogMessage
LogStreamBuf	.recy/log/glog/logging.h	/^  LogStreamBuf(char *buf, int len) {$/;"	f	class:google::base_logging::LogStreamBuf
LogStreamBuf	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL LogStreamBuf : public std::streambuf {$/;"	c	namespace:google::base_logging
Logger	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL Logger {$/;"	c	namespace:google::base
MAX	core/platform/TypeDefine.hpp	32;"	d
MIN	core/platform/TypeDefine.hpp	31;"	d
MUST_UNDEF_GFLAGS_DECLARE_MACROS	.recy/log/glog/logging.h	309;"	d
MUST_UNDEF_GFLAGS_DECLARE_MACROS	.recy/log/glog/logging.h	380;"	d
MakeCheckOpString	.recy/log/glog/logging.h	/^std::string* MakeCheckOpString(const T1& v1, const T2& v2, const char* exprtext) {$/;"	f	namespace:google
MakeCheckOpValueString	.recy/log/glog/logging.h	/^inline void MakeCheckOpValueString(std::ostream* os, const T& v) {$/;"	f	namespace:google
NET	core/NET_Core.hpp	/^namespace NET$/;"	n
NET	core/config/Config.cpp	/^namespace NET $/;"	n	file:
NET	core/config/Config.hpp	/^namespace NET$/;"	n
NET	core/format/XMLElement.hpp	/^namespace NET $/;"	n
NET	core/format/XMLHelper.cpp	/^namespace NET $/;"	n	file:
NET	core/format/XMLHelper.hpp	/^namespace NET$/;"	n
NET	core/format/XMLhelper.cpp	/^namespace NET $/;"	n	file:
NET	core/log/Log.cpp	/^namespace NET$/;"	n	file:
NET	core/log/Log.hpp	/^namespace NET$/;"	n
NET	core/platform/TypeDefine.hpp	/^namespace NET$/;"	n
NET	core/platform/multiplex/MultiBase.cpp	/^namespace NET$/;"	n	file:
NET	core/platform/multiplex/MultiBase.hpp	/^namespace NET$/;"	n
NET	core/platform/multiplex/MultiEpoll.cpp	/^namespace NET$/;"	n	file:
NET	core/platform/multiplex/MultiEpoll.hpp	/^namespace NET$/;"	n
NET	core/platform/multiplex/MultiSelect.hpp	/^namespace NET$/;"	n
NET	core/platform/multiplex/TypeDef.hpp	/^namespace NET$/;"	n
NET	core/socket/Socket.cpp	/^namespace NET$/;"	n	file:
NET	core/socket/Socket.hpp	/^namespace NET$/;"	n
NET	core/socket/SocketServer.cpp	/^namespace NET$/;"	n	file:
NET	core/socket/SocketServer.hpp	/^namespace NET$/;"	n
NET	core/thread/ThreadBase.hpp	/^namespace NET$/;"	n
NET	listener/Listener.cpp	/^namespace NET$/;"	n	file:
NET	listener/Listener.hpp	/^namespace NET$/;"	n
NET	listener/NET_Listener.hpp	/^namespace NET$/;"	n
NET	native/CMain.cpp	/^namespace NET $/;"	n	file:
NET	native/CMain.hpp	/^namespace NET$/;"	n
NET	native/NET_Native.hpp	/^namespace NET$/;"	n
NET	processor/NET_Processor.hpp	/^namespace NET$/;"	n
NET	processor/Processor.cpp	/^namespace NET$/;"	n	file:
NET	processor/Processor.hpp	/^namespace NET$/;"	n
NET	protocol/IProtocol.hpp	/^namespace NET$/;"	n
NET	protocol/NET_Protocol.hpp	/^namespace NET$/;"	n
NET	protocol/ProtocolBase.cpp	/^namespace NET $/;"	n	file:
NET	protocol/ProtocolBase.hpp	/^namespace NET$/;"	n
NET_NONE	core/NET_Core.hpp	37;"	d
NET_READABLE	core/NET_Core.hpp	38;"	d
NET_WRITABLE	core/NET_Core.hpp	39;"	d
NUM_SEVERITIES	.recy/log/glog/log_severity.h	/^  NUM_SEVERITIES = 4;$/;"	v
NullStream	.recy/log/glog/logging.h	/^  NullStream() : LogMessage::LogStream(message_buffer_, 1, 0) { }$/;"	f	class:google::NullStream
NullStream	.recy/log/glog/logging.h	/^  NullStream(const char* \/*file*\/, int \/*line*\/,$/;"	f	class:google::NullStream
NullStream	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL NullStream : public LogMessage::LogStream {$/;"	c	namespace:google
NullStreamFatal	.recy/log/glog/logging.h	/^  NullStreamFatal() { }$/;"	f	class:google::NullStreamFatal
NullStreamFatal	.recy/log/glog/logging.h	/^  NullStreamFatal(const char* file, int line, const CheckOpString& result) :$/;"	f	class:google::NullStreamFatal
NullStreamFatal	.recy/log/glog/logging.h	/^class GOOGLE_GLOG_DLL_DECL NullStreamFatal : public NullStream {$/;"	c	namespace:google
OBJECT	protocol/IProtocol.hpp	/^		} OBJECT;$/;"	t	class:NET::IProtocol	typeref:struct:NET::IProtocol::tagObject
OUTPUT_FIVE_ARG_CONTAINER	.recy/log/glog/stl_logging.h	148;"	d
OUTPUT_FIVE_ARG_CONTAINER	.recy/log/glog/stl_logging.h	169;"	d
OUTPUT_FOUR_ARG_CONTAINER	.recy/log/glog/stl_logging.h	123;"	d
OUTPUT_FOUR_ARG_CONTAINER	.recy/log/glog/stl_logging.h	146;"	d
OUTPUT_THREE_ARG_CONTAINER	.recy/log/glog/stl_logging.h	110;"	d
OUTPUT_THREE_ARG_CONTAINER	.recy/log/glog/stl_logging.h	121;"	d
OUTPUT_TWO_ARG_CONTAINER	.recy/log/glog/stl_logging.h	108;"	d
OUTPUT_TWO_ARG_CONTAINER	.recy/log/glog/stl_logging.h	93;"	d
PCHECK	.recy/log/glog/logging.h	867;"	d
PING_MANAGER	client/Protocol.hpp	/^} PING_MANAGER;$/;"	t	typeref:struct:tagSocketPing
PING_MANAGER	protocol/ProtocolBase.hpp	/^			} PING_MANAGER;$/;"	t	class:NET::CProtocolBase	typeref:struct:NET::CProtocolBase::tagSocketPing
PLOG	.recy/log/glog/logging.h	854;"	d
PLOG_EVERY_N	.recy/log/glog/logging.h	944;"	d
PLOG_IF	.recy/log/glog/logging.h	861;"	d
POINT	core/platform/TypeDefine.hpp	/^	typedef 	INT64			POINT;$/;"	t	namespace:NET
POLL_TIMEOUT_SEC	core/NET_Core.hpp	45;"	d
POLL_TIMEOUT_USEC	core/NET_Core.hpp	46;"	d
PRIVATE_Counter	.recy/log/glog/logging.h	/^enum PRIVATE_Counter {COUNTER};$/;"	g	namespace:google
PrintSequence	.recy/log/glog/stl_logging.h	/^inline void PrintSequence(std::ostream& out, Iter begin, Iter end) {$/;"	f	namespace:google
RAPIDXML_ALIGNMENT	core/format/rapidxml/rapidxml.hpp	131;"	d
RAPIDXML_DYNAMIC_POOL_SIZE	core/format/rapidxml/rapidxml.hpp	123;"	d
RAPIDXML_HPP_INCLUDED	core/format/rapidxml/rapidxml.hpp	2;"	d
RAPIDXML_ITERATORS_HPP_INCLUDED	core/format/rapidxml/rapidxml_iterators.hpp	2;"	d
RAPIDXML_PARSE_ERROR	core/format/rapidxml/rapidxml.hpp	2589;"	d
RAPIDXML_PARSE_ERROR	core/format/rapidxml/rapidxml.hpp	28;"	d
RAPIDXML_PRINT_HPP_INCLUDED	core/format/rapidxml/rapidxml_print.hpp	2;"	d
RAPIDXML_STATIC_POOL_SIZE	core/format/rapidxml/rapidxml.hpp	116;"	d
RAPIDXML_UTILS_HPP_INCLUDED	core/format/rapidxml/rapidxml_utils.hpp	2;"	d
RAW_CHECK	.recy/log/glog/raw_logging.h	139;"	d
RAW_DCHECK	.recy/log/glog/raw_logging.h	150;"	d
RAW_DLOG	.recy/log/glog/raw_logging.h	149;"	d
RAW_LOG	.recy/log/glog/raw_logging.h	69;"	d
RAW_LOG_ERROR	.recy/log/glog/raw_logging.h	117;"	d
RAW_LOG_FATAL	.recy/log/glog/raw_logging.h	124;"	d
RAW_LOG_INFO	.recy/log/glog/raw_logging.h	103;"	d
RAW_LOG_WARNING	.recy/log/glog/raw_logging.h	110;"	d
RAW_VLOG	.recy/log/glog/raw_logging.h	92;"	d
RawLogStub__	.recy/log/glog/raw_logging.h	/^static inline void RawLogStub__(int \/* ignored *\/, ...) {$/;"	f	namespace:google
SIZE_HEADER_MANAGER	client/Protocol.hpp	/^const static int SIZE_HEADER_MANAGER = sizeof(HEADER_MANAGER);$/;"	v
SIZE_HEADER_MANAGER	protocol/IProtocol.hpp	/^		const static int SIZE_HEADER_MANAGER = sizeof(HEADER_MANAGER);$/;"	m	class:NET::IProtocol
SIZE_HEART_MANAGER	client/Protocol.hpp	/^const static int SIZE_HEART_MANAGER = sizeof(HEART_MANAGER);$/;"	v
SIZE_HEART_MANAGER	protocol/ProtocolBase.hpp	/^			const static int SIZE_HEART_MANAGER = sizeof(HEART_MANAGER);$/;"	m	class:NET::CProtocolBase
SIZE_PING_MANAGER	client/Protocol.hpp	/^const static int SIZE_PING_MANAGER = sizeof(PING_MANAGER);$/;"	v
SIZE_PING_MANAGER	protocol/ProtocolBase.hpp	/^			const static int SIZE_PING_MANAGER = sizeof(PING_MANAGER);$/;"	m	class:NET::CProtocolBase
SIZE_TIME_MANAGER	client/Protocol.hpp	/^const static int SIZE_TIME_MANAGER = sizeof(TIME_MANAGER);$/;"	v
SIZE_TIME_MANAGER	protocol/ProtocolBase.hpp	/^			const static int SIZE_TIME_MANAGER = sizeof(TIME_MANAGER);$/;"	m	class:NET::CProtocolBase
SOME_KIND_OF_LOG_EVERY_N	.recy/log/glog/logging.h	891;"	d
SOME_KIND_OF_LOG_FIRST_N	.recy/log/glog/logging.h	918;"	d
SOME_KIND_OF_LOG_IF_EVERY_N	.recy/log/glog/logging.h	900;"	d
SOME_KIND_OF_PLOG_EVERY_N	.recy/log/glog/logging.h	909;"	d
STRING	core/platform/TypeDefine.hpp	/^	typedef 	::std::string	STRING;$/;"	t	namespace:NET
STRING_AUX	.recy/common.h	4;"	d
SYNC_FLAG	client/Protocol.hpp	4;"	d
SYNC_FLAG	protocol/IProtocol.hpp	9;"	d
SYSLOG	.recy/log/glog/logging.h	507;"	d
SYSLOG_0	.recy/log/glog/logging.h	962;"	d
SYSLOG_0	.recy/log/glog/logging.h	973;"	d
SYSLOG_ASSERT	.recy/log/glog/logging.h	577;"	d
SYSLOG_DFATAL	.recy/log/glog/logging.h	476;"	d
SYSLOG_ERROR	.recy/log/glog/logging.h	464;"	d
SYSLOG_EVERY_N	.recy/log/glog/logging.h	941;"	d
SYSLOG_FATAL	.recy/log/glog/logging.h	470;"	d
SYSLOG_IF	.recy/log/glog/logging.h	572;"	d
SYSLOG_INFO	.recy/log/glog/logging.h	452;"	d
SYSLOG_WARNING	.recy/log/glog/logging.h	458;"	d
SYSTEM_MAX_EVENTS	core/NET_Core.hpp	42;"	d
SYSTEM_SOCKET_PORT	core/NET_Core.hpp	43;"	d
SYSTEM_VERSION	core/NET_Core.hpp	41;"	d
SendMethod	.recy/log/glog/logging.h	/^  typedef void (LogMessage::*SendMethod)();$/;"	t	class:google::LogMessage
TARGET_MODULE	core/log/makefile	/^TARGET_MODULE := Log$/;"	m
TARGET_MODULE	core/platform/multiplex/makefile	/^TARGET_MODULE := Multiplex$/;"	m
TARGET_MODULE	core/socket/makefile	/^TARGET_MODULE := Socket$/;"	m
TIME_MANAGER	client/Protocol.hpp	/^} TIME_MANAGER;$/;"	t	typeref:struct:tagSocketTime
TIME_MANAGER	protocol/ProtocolBase.hpp	/^			} TIME_MANAGER;$/;"	t	class:NET::CProtocolBase	typeref:struct:NET::CProtocolBase::tagSocketTime
TRUE	core/platform/TypeDefine.hpp	28;"	d
UINT	core/platform/TypeDefine.hpp	/^	typedef		uint32_t		UINT;$/;"	t	namespace:NET
UINT16	core/platform/TypeDefine.hpp	/^	typedef		uint16_t		UINT16;$/;"	t	namespace:NET
UINT64	core/platform/TypeDefine.hpp	/^	typedef		uint64_t		UINT64;$/;"	t	namespace:NET
UINT8	core/platform/TypeDefine.hpp	/^	typedef		uint8_t			UINT8;$/;"	t	namespace:NET
ULLONG	core/platform/TypeDefine.hpp	/^	typedef		UINT64			ULLONG;$/;"	t	namespace:NET
ULONG	core/platform/TypeDefine.hpp	/^	typedef		UINT64			ULONG;$/;"	t	namespace:NET
UNUSED	core/platform/TypeDefine.hpp	44;"	d
UTIL_GTL_STL_LOGGING_INL_H_	.recy/log/glog/stl_logging.h	48;"	d
VERSION_1_0	core/format/XMLHelper.hpp	/^				VERSION_1_0,$/;"	e	enum:NET::XMLHelper::XMLVersion
VERSION_2_0	core/format/XMLHelper.hpp	/^				VERSION_2_0$/;"	e	enum:NET::XMLHelper::XMLVersion
VLOG	.recy/log/glog/logging.h	1089;"	d
VLOG_EVERY_N	.recy/log/glog/logging.h	1094;"	d
VLOG_IF	.recy/log/glog/logging.h	1091;"	d
VLOG_IF_EVERY_N	.recy/log/glog/logging.h	1097;"	d
VLOG_IS_ON	.recy/log/glog/vlog_is_on.h	82;"	d
VLOG_IS_ON	.recy/log/glog/vlog_is_on.h	93;"	d
WARNING	.recy/log/glog/log_severity.h	/^const int INFO = GLOG_INFO, WARNING = GLOG_WARNING,$/;"	v
XMLElement	core/format/XMLElement.hpp	/^	class XMLElement$/;"	c	namespace:NET
XMLEncoding	core/format/XMLHelper.hpp	/^			enum XMLEncoding$/;"	g	class:NET::XMLHelper
XMLHelper	core/format/XMLHelper.cpp	/^	XMLHelper(XMLVersion version, XMLEncoding encoding)$/;"	f	namespace:NET
XMLHelper	core/format/XMLHelper.hpp	/^	class XMLHelper$/;"	c	namespace:NET
XMLHelper	core/format/XMLhelper.cpp	/^	XMLHelper::XMLHelper()$/;"	f	class:NET::XMLHelper
XMLVersion	core/format/XMLHelper.hpp	/^			enum XMLVersion$/;"	g	class:NET::XMLHelper
_LOGGING_H_	.recy/log/glog/logging.h	37;"	d
__CLOADHELPERHPP__	core/loadHelper/CLoadHelper.hpp	2;"	d
__CMAINHPP__	native/CMain.hpp	2;"	d
__COMMONHH__	.recy/common.h	2;"	d
__CONFIGHPP__	core/config/Config.hpp	2;"	d
__IFILELISTENERHPP__	listener/IFileListener.hpp	2;"	d
__IPROTOCOLHPP__	protocol/IProtocol.hpp	2;"	d
__LISTENERHELPERHPP__	listener/ListenerHelper.hpp	2;"	d
__LISTENERHPP__	listener/Listener.hpp	2;"	d
__LOGHPP__	.recy/log/Log.hpp	2;"	d
__LOGHPP__	core/log/Log.hpp	2;"	d
__MANAGERHPP__	.recy/Manager.hpp	2;"	d
__MULTIEPOLLHPP__	core/platform/multiplex/MultiEpoll.hpp	2;"	d
__MULTIKQUEUEHPP__	core/platform/multiplex/MultiKqueue.hpp	2;"	d
__MULTIPLEXMANAGERHPP__	core/platform/multiplex/MultiBase.hpp	2;"	d
__MULTISELECTHPP__	core/platform/multiplex/MultiSelect.hpp	2;"	d
__NETLISTENERHPP__	listener/NET_Listener.hpp	2;"	d
__NETNATIVEHPP__	native/NET_Native.hpp	2;"	d
__NETPROCESSORHPP__	processor/NET_Processor.hpp	2;"	d
__NETPROTOCOLHPP__	protocol/NET_Protocol.hpp	2;"	d
__NET_COREHPP__	core/NET_Core.hpp	2;"	d
__PROCESSORHPP__	processor/Processor.hpp	2;"	d
__PROTOCOLBASEHPP__	protocol/ProtocolBase.hpp	2;"	d
__PROTOCOLHPP__	client/Protocol.hpp	2;"	d
__SOCKETHPP__	core/socket/Socket.hpp	2;"	d
__SOCKETSERVERHPP__	core/socket/SocketServer.hpp	2;"	d
__THREADBASEHPP__	core/thread/ThreadBase.hpp	2;"	d
__TYPEDEFHPP__	core/platform/multiplex/TypeDef.hpp	2;"	d
__TYPEDEFINEHPP__	core/platform/TypeDefine.hpp	2;"	d
__XMLELEMENTHPP__	core/format/XMLElement.hpp	2;"	d
__XMLHELPERHPP__	core/format/XMLHelper.hpp	2;"	d
addCtrl	.recy/Manager.cpp	/^void addCtrl(int fd)$/;"	f
addFileEvent	core/platform/multiplex/MultiBase.cpp	/^	int CMultiBase::addFileEvent(int fd, int mask)$/;"	f	class:NET::CMultiBase
addFileEvent	core/platform/multiplex/MultiEpoll.cpp	/^	int CMultiEpoll::addFileEvent(int fd, int mask)$/;"	f	class:NET::CMultiEpoll
addFileEvent	core/platform/multiplex/MultiKqueue.cpp	/^int CMultiKqueue::addFileEvent(int fd, int mask)$/;"	f	class:CMultiKqueue
addFileEvent	processor/Processor.cpp	/^	int CProcessor::addFileEvent(int fd, int mask) $/;"	f	class:NET::CProcessor
addFileListener	listener/Listener.cpp	/^	void CListener::addFileListener(IFileListener* pListener)$/;"	f	class:NET::CListener
align	core/format/rapidxml/rapidxml.hpp	/^        char *align(char *ptr)$/;"	f	class:rapidxml::memory_pool
alloc_func	core/format/rapidxml/rapidxml.hpp	/^        typedef void *(alloc_func)(std::size_t);       \/\/ Type of user-defined function used to allocate memory$/;"	t	class:rapidxml::memory_pool
allocate_aligned	core/format/rapidxml/rapidxml.hpp	/^        void *allocate_aligned(std::size_t size)$/;"	f	class:rapidxml::memory_pool
allocate_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *allocate_attribute(const Ch *name = 0, const Ch *value = 0, $/;"	f	class:rapidxml::memory_pool
allocate_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *allocate_node(node_type type, $/;"	f	class:rapidxml::memory_pool
allocate_raw	core/format/rapidxml/rapidxml.hpp	/^        char *allocate_raw(std::size_t size)$/;"	f	class:rapidxml::memory_pool
allocate_string	core/format/rapidxml/rapidxml.hpp	/^        Ch *allocate_string(const Ch *source = 0, std::size_t size = 0)$/;"	f	class:rapidxml::memory_pool
allocated_	.recy/log/glog/logging.h	/^  LogMessageData* allocated_;$/;"	m	class:google::LogMessage
alsologtostderr	.recy/log/glog/logging.h	/^DECLARE_bool(alsologtostderr);$/;"	v
analyse	protocol/ProtocolBase.cpp	/^	int CProtocolBase::analyse(int size, char* buff)$/;"	f	class:NET::CProtocolBase
append_attribute	core/format/rapidxml/rapidxml.hpp	/^        void append_attribute(xml_attribute<Ch> *attribute)$/;"	f	class:rapidxml::xml_node
append_node	core/format/rapidxml/rapidxml.hpp	/^        void append_node(xml_node<Ch> *child)$/;"	f	class:rapidxml::xml_node
arg	core/platform/multiplex/TypeDef.hpp	/^		void* arg;$/;"	m	struct:NET::tagEventLoop
attribute_iterator	core/format/rapidxml/rapidxml_iterators.hpp	/^        attribute_iterator()$/;"	f	class:rapidxml::attribute_iterator
attribute_iterator	core/format/rapidxml/rapidxml_iterators.hpp	/^        attribute_iterator(xml_node<Ch> *node)$/;"	f	class:rapidxml::attribute_iterator
attribute_iterator	core/format/rapidxml/rapidxml_iterators.hpp	/^    class attribute_iterator$/;"	c	namespace:rapidxml
attribute_name_pred	core/format/rapidxml/rapidxml.hpp	/^        struct attribute_name_pred$/;"	s	class:rapidxml::xml_document
attribute_value_pred	core/format/rapidxml/rapidxml.hpp	/^        struct attribute_value_pred$/;"	s	class:rapidxml::xml_document
attribute_value_pure_pred	core/format/rapidxml/rapidxml.hpp	/^        struct attribute_value_pure_pred$/;"	s	class:rapidxml::xml_document
base	.recy/log/glog/logging.h	/^namespace base {$/;"	n	namespace:google
base_logging	.recy/log/glog/logging.h	/^namespace base_logging {$/;"	n	namespace:google
bindAndListen	core/socket/SocketServer.cpp	/^	void CSocketServer::bindAndListen()$/;"	f	class:NET::CSocketServer
buildSystenInfo	core/config/Config.cpp	/^	void CConfig::buildSystenInfo()$/;"	f	class:NET::CConfig
callSpecialFunc	protocol/ProtocolBase.cpp	/^	int CProtocolBase::callSpecialFunc(int type, int size,const char* src, OBJECT* &target)$/;"	f	class:NET::CProtocolBase
checkDirection	core/log/Log.cpp	/^	bool CLog::checkDirection(const char* strPath)$/;"	f	class:NET::CLog
checkProtocol	protocol/ProtocolBase.cpp	/^	bool CProtocolBase::checkProtocol(int protocol)$/;"	f	class:NET::CProtocolBase
checkSize	protocol/ProtocolBase.cpp	/^	int CProtocolBase::checkSize(int protocol, int size)$/;"	f	class:NET::CProtocolBase
clean	core/platform/multiplex/TypeDef.hpp	/^		void clean() {$/;"	f	struct:NET::tagFileEvent
clear	core/format/rapidxml/rapidxml.hpp	/^        void clear()$/;"	f	class:rapidxml::memory_pool
clear	core/format/rapidxml/rapidxml.hpp	/^        void clear()$/;"	f	class:rapidxml::xml_document
clone_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *clone_node(const xml_node<Ch> *source, xml_node<Ch> *result = 0)$/;"	f	class:rapidxml::memory_pool
colorlogtostderr	.recy/log/glog/logging.h	/^DECLARE_bool(colorlogtostderr);$/;"	v
compare	core/format/rapidxml/rapidxml.hpp	/^        inline bool compare(const Ch *p1, std::size_t size1, const Ch *p2, std::size_t size2, bool case_sensitive)$/;"	f	namespace:rapidxml::internal
copy_and_expand_chars	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt copy_and_expand_chars(const Ch *begin, const Ch *end, Ch noexpand, OutIt out)$/;"	f	namespace:rapidxml::internal
copy_chars	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt copy_chars(const Ch *begin, const Ch *end, OutIt out)$/;"	f	namespace:rapidxml::internal
count_attributes	core/format/rapidxml/rapidxml_utils.hpp	/^    inline std::size_t count_attributes(xml_node<Ch> *node)$/;"	f	namespace:rapidxml
count_children	core/format/rapidxml/rapidxml_utils.hpp	/^    inline std::size_t count_children(xml_node<Ch> *node)$/;"	f	namespace:rapidxml
create	core/format/XMLHelper.cpp	/^	void XMLHelper::create()$/;"	f	class:NET::XMLHelper
create	core/format/XMLhelper.cpp	/^	void XMLHelper::create()$/;"	f	class:NET::XMLHelper
create	listener/ListenerHelper.hpp	/^	CListener* create()$/;"	f
ctr	.recy/log/glog/logging.h	/^    int ctr() const { return ctr_; }$/;"	f	class:google::LogMessage::LogStream
ctr_	.recy/log/glog/logging.h	/^    int ctr_;  \/\/ Counter hack (for the LOG_EVERY_X() macro)$/;"	m	class:google::LogMessage::LogStream
current	client/Protocol.hpp	/^	int current;$/;"	m	struct:tagSocketPing
current	protocol/ProtocolBase.hpp	/^				int current;$/;"	m	struct:NET::CProtocolBase::tagSocketPing
data	core/format/rapidxml/rapidxml_utils.hpp	/^        Ch *data()$/;"	f	class:rapidxml::file
data	core/format/rapidxml/rapidxml_utils.hpp	/^        const Ch *data() const$/;"	f	class:rapidxml::file
data	core/platform/multiplex/TypeDef.hpp	/^		char* data;$/;"	m	struct:NET::tagFileEvent
data	protocol/IProtocol.hpp	/^			char* data;$/;"	m	struct:NET::IProtocol::tagObject
dataSize	core/platform/multiplex/TypeDef.hpp	/^		unsigned int dataSize;$/;"	m	struct:NET::tagFileEvent
data_	.recy/log/glog/logging.h	/^  LogMessageData* data_;$/;"	m	class:google::LogMessage
deadLimit	client/Protocol.hpp	/^	int deadLimit;$/;"	m	struct:tagSocketPing
deadLimit	protocol/ProtocolBase.hpp	/^				int deadLimit;$/;"	m	struct:NET::CProtocolBase::tagSocketPing
delFileEvent	core/platform/multiplex/MultiBase.cpp	/^	void CMultiBase::delFileEvent(int fd, int mask)$/;"	f	class:NET::CMultiBase
delFileEvent	core/platform/multiplex/MultiEpoll.cpp	/^	void CMultiEpoll::delFileEvent(int fd, int mask)$/;"	f	class:NET::CMultiEpoll
delFileEvent	core/platform/multiplex/MultiKqueue.cpp	/^void CMultiKqueue::delFileEvent(int fd, int mask)$/;"	f	class:CMultiKqueue
delFileEvent	processor/Processor.cpp	/^	void CProcessor::delFileEvent(int fd, int mask)$/;"	f	class:NET::CProcessor
delFileListener	listener/Listener.cpp	/^	void CListener::delFileListener(IFileListener* pListener)$/;"	f	class:NET::CListener
destroy	core/socket/Socket.cpp	/^	void CSocket::destroy()$/;"	f	class:NET::CSocket
destroy	listener/ListenerHelper.hpp	/^	void destroy(CListener* p)$/;"	f
destroyManager	.recy/Manager.cpp	/^void destroyManager()$/;"	f
difference_type	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef std::ptrdiff_t difference_type;$/;"	t	class:rapidxml::attribute_iterator
difference_type	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef std::ptrdiff_t difference_type;$/;"	t	class:rapidxml::node_iterator
document	core/format/rapidxml/rapidxml.hpp	/^        xml_document<Ch> *document() const$/;"	f	class:rapidxml::xml_attribute
document	core/format/rapidxml/rapidxml.hpp	/^        xml_document<Ch> *document() const$/;"	f	class:rapidxml::xml_node
enableColor	core/log/Log.cpp	/^	void CLog::enableColor(bool bEnable)$/;"	f	class:NET::CLog
enableEdgeTrigger	core/platform/multiplex/MultiBase.hpp	/^			void			enableEdgeTrigger(bool on = true) 	{ m_isEdgeTrigger = on; }$/;"	f	class:NET::CMultiBase
enableToStderr	core/log/Log.cpp	/^	void CLog::enableToStderr(bool bEnable)$/;"	f	class:NET::CLog
epollfd	.recy/Manager.cpp	/^static int epollfd;$/;"	v	file:
ev	.recy/Manager.cpp	/^struct epoll_event ev, events[SYSTEM_LIMIT_MAX_EPOLL_EVENTS];$/;"	v	typeref:struct:epoll_event
event	core/platform/multiplex/TypeDef.hpp	/^		::std::vector<FILE_EVENT> event;$/;"	m	struct:NET::tagEventLoop
eventLoop	core/platform/multiplex/MultiBase.cpp	/^	int CMultiBase::eventLoop(void* timeout)$/;"	f	class:NET::CMultiBase
eventLoop	core/platform/multiplex/MultiEpoll.cpp	/^	int CMultiEpoll::eventLoop(void* timeout)$/;"	f	class:NET::CMultiEpoll
eventLoop	core/platform/multiplex/MultiKqueue.cpp	/^int CMultiKqueue::eventLoop(EVENT_LOOP *loop, void* timeout)$/;"	f	class:CMultiKqueue
events	.recy/Manager.cpp	/^struct epoll_event ev, events[SYSTEM_LIMIT_MAX_EPOLL_EVENTS];$/;"	v	typeref:struct:
fd	core/platform/multiplex/TypeDef.hpp	/^		int fd;$/;"	m	struct:NET::tagFileEvent
fd	core/platform/multiplex/TypeDef.hpp	/^		int fd;$/;"	m	struct:NET::tagFiredEvent
file	core/format/rapidxml/rapidxml_utils.hpp	/^        file(const char *filename)$/;"	f	class:rapidxml::file
file	core/format/rapidxml/rapidxml_utils.hpp	/^        file(std::basic_istream<Ch> &stream)$/;"	f	class:rapidxml::file
file	core/format/rapidxml/rapidxml_utils.hpp	/^    class file$/;"	c	namespace:rapidxml
fill_chars	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt fill_chars(OutIt out, int n, Ch ch)$/;"	f	namespace:rapidxml::internal
final	core/config/Config.hpp	/^	class CConfig final$/;"	c	namespace:NET
find_char	core/format/rapidxml/rapidxml_print.hpp	/^        inline bool find_char(const Ch *begin, const Ch *end)$/;"	f	namespace:rapidxml::internal
fired	core/platform/multiplex/TypeDef.hpp	/^		::std::vector<FIRED_EVENT> fired;$/;"	m	struct:NET::tagEventLoop
first_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *first_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
first_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *first_node(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
format	core/log/Log.cpp	/^	std::string CLog::format(const char* fmt, ...) $/;"	f	class:NET::CLog
free_func	core/format/rapidxml/rapidxml.hpp	/^        typedef void (free_func)(void *);              \/\/ Type of user-defined function used to free memory$/;"	t	class:rapidxml::memory_pool
getEventLoop	core/platform/multiplex/MultiBase.hpp	/^			EVENT_LOOP* 	getEventLoop()				{ return m_eventLoop; }$/;"	f	class:NET::CMultiBase
getInstance	core/config/Config.cpp	/^	CConfig* CConfig::getInstance()$/;"	f	class:NET::CConfig
getInstance	native/CMain.cpp	/^	CMain* CMain::getInstance()$/;"	f	class:NET::CMain
getRootElement	core/format/XMLHelper.hpp	/^			XMLElement*				getRootElement()						{ return m_pRootElement; }$/;"	f	class:NET::XMLHelper
getServerIP	core/socket/SocketServer.hpp	/^			const char* 	getServerIP() const 			{ return m_serverIp; };$/;"	f	class:NET::CSocketServer
getSocketFD	core/socket/Socket.hpp	/^			int 	getSocketFD()	const 		{ return m_fd; }$/;"	f	class:NET::CSocket
getSystemInfo	core/config/Config.hpp	/^			inline tagSystemInfo&	getSystemInfo()	const	{ return m_tagSysInfo; }$/;"	f	class:NET::final
getThreadID	core/thread/ThreadBase.hpp	/^		::std::thread::id getThreadID()$/;"	f	class:NET::CThreadBase
getType	core/platform/multiplex/MultiBase.hpp	/^			EMultiType		getType() const 			{ return m_eType; }$/;"	f	class:NET::CMultiBase
glog_internal_namespace_	.recy/log/glog/logging.h	/^namespace glog_internal_namespace_ {$/;"	n	namespace:google
google	.recy/log/glog/logging.h	/^namespace google {$/;"	n
google	.recy/log/glog/raw_logging.h	/^namespace google {$/;"	n
google	.recy/log/glog/stl_logging.h	/^namespace google {$/;"	n
handle_error	core/platform/TypeDefine.hpp	38;"	d
handle_error_errno	core/platform/TypeDefine.hpp	41;"	d
handover	.recy/Manager.cpp	/^void* handover(void* arg)$/;"	f
hasRootElement	core/format/XMLHelper.hpp	/^			BOOLEAN					hasRootElement()						{ return m_pRootElement == NULL; }$/;"	f	class:NET::XMLHelper
header	core/format/rapidxml/rapidxml.hpp	/^        struct header$/;"	s	class:rapidxml::memory_pool
init	core/format/rapidxml/rapidxml.hpp	/^        void init()$/;"	f	class:rapidxml::memory_pool
init	core/socket/Socket.cpp	/^	void CSocket::init()$/;"	f	class:NET::CSocket
initLog	core/log/Log.cpp	/^	void CLog::initLog(const char* name)$/;"	f	class:NET::CLog
initManager	.recy/Manager.cpp	/^void initManager()$/;"	f
initialize	core/config/Config.cpp	/^	void CConfig::initialize()$/;"	f	class:NET::CConfig
initialize	native/CMain.cpp	/^	bool CMain::initialize()$/;"	f	class:NET::CMain
innerInitListener	native/CMain.cpp	/^	void CMain::innerInitListener()$/;"	f	class:NET::CMain
innerInitModule	native/CMain.cpp	/^	void CMain::innerInitModule()$/;"	f	class:NET::CMain
innerInitProcessor	native/CMain.cpp	/^	void CMain::innerInitProcessor()$/;"	f	class:NET::CMain
innerPackageECHO	protocol/ProtocolBase.cpp	/^	int CProtocolBase::innerPackageECHO(const OBJECT* src, char* &des)$/;"	f	class:NET::CProtocolBase
innerPackageHEART	protocol/ProtocolBase.cpp	/^	void CProtocolBase::innerPackageHEART()$/;"	f	class:NET::CProtocolBase
innerPackagePING	protocol/ProtocolBase.cpp	/^	int CProtocolBase::innerPackagePING(const OBJECT* src, char* &des)$/;"	f	class:NET::CProtocolBase
innerPackageTIME	protocol/ProtocolBase.cpp	/^	void CProtocolBase::innerPackageTIME()$/;"	f	class:NET::CProtocolBase
innerRemoveModule	native/CMain.cpp	/^	void CMain::innerRemoveModule()$/;"	f	class:NET::CMain
insert_attribute	core/format/rapidxml/rapidxml.hpp	/^        void insert_attribute(xml_attribute<Ch> *where, xml_attribute<Ch> *attribute)$/;"	f	class:rapidxml::xml_node
insert_coded_character	core/format/rapidxml/rapidxml.hpp	/^        static void insert_coded_character(Ch *&text, unsigned long code)$/;"	f	class:rapidxml::xml_document
insert_node	core/format/rapidxml/rapidxml.hpp	/^        void insert_node(xml_node<Ch> *where, xml_node<Ch> *child)$/;"	f	class:rapidxml::xml_node
int32	.recy/log/glog/logging.h	/^typedef int32_t int32;$/;"	t	namespace:google
int64	.recy/log/glog/logging.h	/^typedef int64_t int64;$/;"	t	namespace:google
internal	.recy/log/glog/logging.h	/^namespace internal {$/;"	n	namespace:google::base
internal	core/format/rapidxml/rapidxml.hpp	/^    namespace internal$/;"	n	namespace:rapidxml
internal	core/format/rapidxml/rapidxml_print.hpp	/^    namespace internal$/;"	n	namespace:rapidxml
iterator_category	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:rapidxml::attribute_iterator
iterator_category	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:rapidxml::node_iterator
kMaxLogMessageLen	.recy/log/glog/logging.h	/^  static const size_t kMaxLogMessageLen;$/;"	m	class:google::LogMessage
kNoLogPrefix	.recy/log/glog/logging.h	/^    kNoLogPrefix = -1$/;"	e	enum:google::LogMessage::__anon1
last_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *last_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
last_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *last_node(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
loadConfig	native/CMain.cpp	/^	bool CMain::loadConfig()$/;"	f	class:NET::CMain
log_dir	.recy/log/glog/logging.h	/^DECLARE_string(log_dir);$/;"	v
log_link	.recy/log/glog/logging.h	/^DECLARE_string(log_link);$/;"	v
log_prefix	.recy/log/glog/logging.h	/^DECLARE_bool(log_prefix);$/;"	v
logbuflevel	.recy/log/glog/logging.h	/^DECLARE_int32(logbuflevel);$/;"	v
logbufsecs	.recy/log/glog/logging.h	/^DECLARE_int32(logbufsecs);$/;"	v
logfile_mode	.recy/log/glog/logging.h	/^DECLARE_int32(logfile_mode);$/;"	v
lookup_attribute_data_1	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_1[256];        \/\/ Attribute data table with single quote$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_1	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_data_1_pure	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_1_pure[256];   \/\/ Attribute data table with single quote$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_1_pure	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_1_pure[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_data_2	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_2[256];        \/\/ Attribute data table with double quotes$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_2	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_data_2_pure	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_attribute_data_2_pure[256];   \/\/ Attribute data table with double quotes$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_data_2_pure	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_data_2_pure[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_attribute_name	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_attribute_name[256];          \/\/ Attribute name table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_attribute_name	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_attribute_name[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_digits	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_digits[256];                  \/\/ Digits$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_digits	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_digits[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_node_name	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_node_name[256];               \/\/ Node name table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_node_name	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_node_name[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_tables	core/format/rapidxml/rapidxml.hpp	/^        struct lookup_tables$/;"	s	namespace:rapidxml::internal
lookup_text	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_text[256];                    \/\/ Text table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_text	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_text[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_text_pure_no_ws	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_text_pure_no_ws[256];         \/\/ Text table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_text_pure_no_ws	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_text_pure_no_ws[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_text_pure_with_ws	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_text_pure_with_ws[256];       \/\/ Text table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_text_pure_with_ws	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_text_pure_with_ws[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_upcase	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_upcase[256];                  \/\/ To uppercase conversion table for ASCII characters$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_upcase	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_upcase[256] = $/;"	m	class:rapidxml::internal::lookup_tables
lookup_whitespace	core/format/rapidxml/rapidxml.hpp	/^            static const unsigned char lookup_whitespace[256];              \/\/ Whitespace table$/;"	m	struct:rapidxml::internal::lookup_tables
lookup_whitespace	core/format/rapidxml/rapidxml.hpp	/^        const unsigned char lookup_tables<Dummy>::lookup_whitespace[256] = $/;"	m	class:rapidxml::internal::lookup_tables
m_alloc_func	core/format/rapidxml/rapidxml.hpp	/^        alloc_func *m_alloc_func;                           \/\/ Allocator function, or 0 if default is to be used$/;"	m	class:rapidxml::memory_pool
m_attribute	core/format/rapidxml/rapidxml_iterators.hpp	/^        xml_attribute<Ch> *m_attribute;$/;"	m	class:rapidxml::attribute_iterator
m_bInitialized	native/CMain.hpp	/^			bool			m_bInitialized;	$/;"	m	class:NET::CMain
m_bStop	core/thread/ThreadBase.hpp	/^		bool 		m_bStop;$/;"	m	class:NET::CThreadBase
m_begin	core/format/rapidxml/rapidxml.hpp	/^        char *m_begin;                                      \/\/ Start of raw memory making up current pool$/;"	m	class:rapidxml::memory_pool
m_data	core/format/rapidxml/rapidxml_utils.hpp	/^        std::vector<Ch> m_data;   \/\/ File data$/;"	m	class:rapidxml::file
m_eEncoding	core/format/XMLHelper.hpp	/^			XMLEncoding				m_eEncoding;$/;"	m	class:NET::XMLHelper
m_eType	core/platform/multiplex/MultiBase.hpp	/^			EMultiType		m_eType;$/;"	m	class:NET::CMultiBase
m_eVersion	core/format/XMLHelper.hpp	/^			XMLVersion				m_eVersion;$/;"	m	class:NET::XMLHelper
m_end	core/format/rapidxml/rapidxml.hpp	/^        char *m_end;                                        \/\/ One past last available byte in current pool$/;"	m	class:rapidxml::memory_pool
m_epfd	core/platform/multiplex/MultiEpoll.hpp	/^			int m_epfd;$/;"	m	class:NET::CMultiEpoll
m_eventLoop	core/platform/multiplex/MultiBase.hpp	/^			EVENT_LOOP* 	m_eventLoop;$/;"	m	class:NET::CMultiBase
m_events	core/platform/multiplex/MultiEpoll.hpp	/^			struct epoll_event *m_events;$/;"	m	class:NET::CMultiEpoll	typeref:struct:NET::CMultiEpoll::epoll_event
m_events	core/platform/multiplex/MultiKqueue.hpp	/^		struct kevent *m_events;$/;"	m	class:CMultiKqueue	typeref:struct:CMultiKqueue::kevent
m_fd	core/socket/Socket.hpp	/^			int 	m_fd;$/;"	m	class:NET::CSocket
m_first_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *m_first_attribute;   \/\/ Pointer to first attribute of node, or 0 if none; always valid$/;"	m	class:rapidxml::xml_node
m_first_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *m_first_node;             \/\/ Pointer to first child node, or 0 if none; always valid$/;"	m	class:rapidxml::xml_node
m_free_func	core/format/rapidxml/rapidxml.hpp	/^        free_func *m_free_func;                             \/\/ Free function, or 0 if default is to be used$/;"	m	class:rapidxml::memory_pool
m_isEdgeTrigger	core/platform/multiplex/MultiBase.hpp	/^			bool			m_isEdgeTrigger;$/;"	m	class:NET::CMultiBase
m_kqfd	core/platform/multiplex/MultiKqueue.hpp	/^		int m_kqfd;$/;"	m	class:CMultiKqueue
m_last_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *m_last_attribute;    \/\/ Pointer to last attribute of node, or 0 if none; this value is only valid if m_first_attribute is non-zero$/;"	m	class:rapidxml::xml_node
m_last_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *m_last_node;              \/\/ Pointer to last child node, or 0 if none; this value is only valid if m_first_node is non-zero$/;"	m	class:rapidxml::xml_node
m_lstListener	listener/Listener.hpp	/^			::std::list<IFileListener*> m_lstListener;$/;"	m	class:NET::CListener
m_lstModule	native/CMain.hpp	/^			::std::forward_list<CModule> m_lstModule;$/;"	m	class:NET::CMain
m_name	core/format/rapidxml/rapidxml.hpp	/^        Ch *m_name;                         \/\/ Name of node, or 0 if no name$/;"	m	class:rapidxml::xml_base
m_name_size	core/format/rapidxml/rapidxml.hpp	/^        std::size_t m_name_size;            \/\/ Length of node name, or undefined of no name$/;"	m	class:rapidxml::xml_base
m_next_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *m_next_attribute;        \/\/ Pointer to next sibling of attribute, or 0 if none; only valid if parent is non-zero$/;"	m	class:rapidxml::xml_attribute
m_next_sibling	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *m_next_sibling;           \/\/ Pointer to next sibling of node, or 0 if none; this value is only valid if m_parent is non-zero$/;"	m	class:rapidxml::xml_node
m_node	core/format/rapidxml/rapidxml_iterators.hpp	/^        xml_node<Ch> *m_node;$/;"	m	class:rapidxml::node_iterator
m_pInstance	core/config/Config.cpp	/^	CConfig* CConfig::m_pInstance = NULL;$/;"	m	class:NET::CConfig	file:
m_pInstance	core/config/Config.hpp	/^			static CConfig* m_pInstance;$/;"	m	class:NET::final
m_pMultiplex	processor/Processor.hpp	/^			CMultiBase* 	m_pMultiplex;$/;"	m	class:NET::CProcessor
m_pRootElement	core/format/XMLHelper.hpp	/^			XMLElement*				m_pRootElement;$/;"	m	class:NET::XMLHelper
m_pXmlDoc	core/format/XMLHelper.hpp	/^			xml_document<>*			m_pXmlDoc;$/;"	m	class:NET::XMLHelper
m_parent	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *m_parent;             \/\/ Pointer to parent node, or 0 if none$/;"	m	class:rapidxml::xml_base
m_prev_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *m_prev_attribute;        \/\/ Pointer to previous sibling of attribute, or 0 if none; only valid if parent is non-zero$/;"	m	class:rapidxml::xml_attribute
m_prev_sibling	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *m_prev_sibling;           \/\/ Pointer to previous sibling of node, or 0 if none; this value is only valid if m_parent is non-zero$/;"	m	class:rapidxml::xml_node
m_ptr	core/format/rapidxml/rapidxml.hpp	/^        char *m_ptr;                                        \/\/ First free byte in current pool$/;"	m	class:rapidxml::memory_pool
m_server	listener/Listener.hpp	/^			CSocketServer 				m_server;$/;"	m	class:NET::CListener
m_serverIp	core/socket/SocketServer.hpp	/^			char 	m_serverIp[16];		\/\/max is 255.255.255.255$/;"	m	class:NET::CSocketServer
m_serverPort	core/socket/SocketServer.hpp	/^			int 	m_serverPort;$/;"	m	class:NET::CSocketServer
m_static_memory	core/format/rapidxml/rapidxml.hpp	/^        char m_static_memory[RAPIDXML_STATIC_POOL_SIZE];    \/\/ Static raw memory$/;"	m	class:rapidxml::memory_pool
m_tagSysInfo	core/config/Config.hpp	/^			tagSystemInfo	m_tagSysInfo;$/;"	m	class:NET::final
m_thread	core/thread/ThreadBase.hpp	/^		::std::thread m_thread;$/;"	m	class:NET::CThreadBase
m_type	core/format/rapidxml/rapidxml.hpp	/^        node_type m_type;                       \/\/ Type of node; always valid$/;"	m	class:rapidxml::xml_node
m_uiPriority	core/config/Config.hpp	/^				unsigned int m_uiPriority;$/;"	m	struct:NET::final::tagSystemInfo
m_uiPriority	native/CMain.hpp	/^				unsigned int m_uiPriority;$/;"	m	struct:NET::CMain::tagSystemInfo
m_uiSize	processor/Processor.hpp	/^			unsigned int 	m_uiSize;$/;"	m	class:NET::CProcessor
m_uiThreadCount	core/config/Config.hpp	/^				unsigned int m_uiThreadCount;$/;"	m	struct:NET::final::tagSystemInfo
m_uiThreadCount	native/CMain.hpp	/^				unsigned int m_uiThreadCount;$/;"	m	struct:NET::CMain::tagSystemInfo
m_value	core/format/rapidxml/rapidxml.hpp	/^        Ch *m_value;                        \/\/ Value of node, or 0 if no value$/;"	m	class:rapidxml::xml_base
m_value_size	core/format/rapidxml/rapidxml.hpp	/^        std::size_t m_value_size;           \/\/ Length of node value, or undefined if no value$/;"	m	class:rapidxml::xml_base
main	client/client.cpp	/^int main(int argc, const char *argv[])$/;"	f
main	demo/main.cpp	/^int main(int argc, const char *argv[])$/;"	f
mainLoop	core/thread/ThreadBase.hpp	/^		virtual void mainLoop(void* arg)$/;"	f	class:NET::CThreadBase
mainLoop	listener/Listener.cpp	/^	void CListener::mainLoop(void* arg)$/;"	f	class:NET::CListener
mainLoop	native/CMain.cpp	/^	void CMain::mainLoop(void* arg)$/;"	f	class:NET::CMain
mainLoop	processor/Processor.cpp	/^	void CProcessor::mainLoop(void* arg) $/;"	f	class:NET::CProcessor
manager_queue	.recy/Manager.cpp	/^std::queue<int> manager_queue;$/;"	v
mask	core/platform/multiplex/TypeDef.hpp	/^		int mask;$/;"	m	struct:NET::tagFileEvent
mask	core/platform/multiplex/TypeDef.hpp	/^		int mask;$/;"	m	struct:NET::tagFiredEvent
max_log_size	.recy/log/glog/logging.h	/^DECLARE_int32(max_log_size);$/;"	v
maxfd	core/platform/multiplex/TypeDef.hpp	/^		int maxfd;$/;"	m	struct:NET::tagEventLoop
measure	core/format/rapidxml/rapidxml.hpp	/^        inline std::size_t measure(const Ch *p)$/;"	f	namespace:rapidxml::internal
memory_pool	core/format/rapidxml/rapidxml.hpp	/^        memory_pool()$/;"	f	class:rapidxml::memory_pool
memory_pool	core/format/rapidxml/rapidxml.hpp	/^    class memory_pool$/;"	c	namespace:rapidxml
message_buffer_	.recy/log/glog/logging.h	/^  char message_buffer_[2];$/;"	m	class:google::NullStream
millsecond	client/Protocol.hpp	/^	int millsecond;$/;"	m	struct:tagSocketTime
millsecond	protocol/ProtocolBase.hpp	/^				int millsecond;$/;"	m	struct:NET::CProtocolBase::tagSocketTime
minloglevel	.recy/log/glog/logging.h	/^DECLARE_int32(minloglevel);$/;"	v
mt	.recy/Manager.cpp	/^std::mutex mt;$/;"	v
name	core/format/rapidxml/rapidxml.hpp	/^        Ch *name() const$/;"	f	class:rapidxml::xml_base
name	core/format/rapidxml/rapidxml.hpp	/^        void name(const Ch *name)$/;"	f	class:rapidxml::xml_base
name	core/format/rapidxml/rapidxml.hpp	/^        void name(const Ch *name, std::size_t size)$/;"	f	class:rapidxml::xml_base
name_size	core/format/rapidxml/rapidxml.hpp	/^        std::size_t name_size() const$/;"	f	class:rapidxml::xml_base
next_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *next_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_attribute
next_sibling	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *next_sibling(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
node_cdata	core/format/rapidxml/rapidxml.hpp	/^        node_cdata,         \/\/!< A CDATA node. Name is empty. Value contains data text.$/;"	e	enum:rapidxml::node_type
node_comment	core/format/rapidxml/rapidxml.hpp	/^        node_comment,       \/\/!< A comment node. Name is empty. Value contains comment text.$/;"	e	enum:rapidxml::node_type
node_data	core/format/rapidxml/rapidxml.hpp	/^        node_data,          \/\/!< A data node. Name is empty. Value contains data text.$/;"	e	enum:rapidxml::node_type
node_declaration	core/format/rapidxml/rapidxml.hpp	/^        node_declaration,   \/\/!< A declaration node. Name and value are empty. Declaration parameters (version, encoding and standalone) are in node attributes.$/;"	e	enum:rapidxml::node_type
node_doctype	core/format/rapidxml/rapidxml.hpp	/^        node_doctype,       \/\/!< A DOCTYPE node. Name is empty. Value contains DOCTYPE text.$/;"	e	enum:rapidxml::node_type
node_document	core/format/rapidxml/rapidxml.hpp	/^        node_document,      \/\/!< A document node. Name and value are empty.$/;"	e	enum:rapidxml::node_type
node_element	core/format/rapidxml/rapidxml.hpp	/^        node_element,       \/\/!< An element node. Name contains element name. Value contains text of first data node.$/;"	e	enum:rapidxml::node_type
node_iterator	core/format/rapidxml/rapidxml_iterators.hpp	/^        node_iterator()$/;"	f	class:rapidxml::node_iterator
node_iterator	core/format/rapidxml/rapidxml_iterators.hpp	/^        node_iterator(xml_node<Ch> *node)$/;"	f	class:rapidxml::node_iterator
node_iterator	core/format/rapidxml/rapidxml_iterators.hpp	/^    class node_iterator$/;"	c	namespace:rapidxml
node_name_pred	core/format/rapidxml/rapidxml.hpp	/^        struct node_name_pred$/;"	s	class:rapidxml::xml_document
node_pi	core/format/rapidxml/rapidxml.hpp	/^        node_pi             \/\/!< A PI node. Name contains target. Value contains instructions.$/;"	e	enum:rapidxml::node_type
node_type	core/format/rapidxml/rapidxml.hpp	/^    enum node_type$/;"	g	namespace:rapidxml
nullstr	core/format/rapidxml/rapidxml.hpp	/^        static Ch *nullstr()$/;"	f	class:rapidxml::xml_base
num_messages_	.recy/log/glog/logging.h	/^  static int64 num_messages_[NUM_SEVERITIES];  \/\/ under log_mutex$/;"	m	class:google::LogMessage
offet	client/Protocol.hpp	/^	int offet;$/;"	m	struct:tagSocketTime
offet	protocol/ProtocolBase.hpp	/^				int offet;$/;"	m	struct:NET::CProtocolBase::tagSocketTime
operator !=	core/format/rapidxml/rapidxml_iterators.hpp	/^        bool operator !=(const attribute_iterator<Ch> &rhs)$/;"	f	class:rapidxml::attribute_iterator
operator !=	core/format/rapidxml/rapidxml_iterators.hpp	/^        bool operator !=(const node_iterator<Ch> &rhs)$/;"	f	class:rapidxml::node_iterator
operator &	.recy/log/glog/logging.h	/^  void operator&(std::ostream&) { }$/;"	f	class:google::LogMessageVoidify
operator *	core/format/rapidxml/rapidxml_iterators.hpp	/^        reference operator *() const$/;"	f	class:rapidxml::attribute_iterator
operator *	core/format/rapidxml/rapidxml_iterators.hpp	/^        reference operator *() const$/;"	f	class:rapidxml::node_iterator
operator ++	core/format/rapidxml/rapidxml_iterators.hpp	/^        attribute_iterator operator++(int)$/;"	f	class:rapidxml::attribute_iterator
operator ++	core/format/rapidxml/rapidxml_iterators.hpp	/^        attribute_iterator& operator++()$/;"	f	class:rapidxml::attribute_iterator
operator ++	core/format/rapidxml/rapidxml_iterators.hpp	/^        node_iterator operator++(int)$/;"	f	class:rapidxml::node_iterator
operator ++	core/format/rapidxml/rapidxml_iterators.hpp	/^        node_iterator& operator++()$/;"	f	class:rapidxml::node_iterator
operator --	core/format/rapidxml/rapidxml_iterators.hpp	/^        attribute_iterator operator--(int)$/;"	f	class:rapidxml::attribute_iterator
operator --	core/format/rapidxml/rapidxml_iterators.hpp	/^        attribute_iterator& operator--()$/;"	f	class:rapidxml::attribute_iterator
operator --	core/format/rapidxml/rapidxml_iterators.hpp	/^        node_iterator operator--(int)$/;"	f	class:rapidxml::node_iterator
operator --	core/format/rapidxml/rapidxml_iterators.hpp	/^        node_iterator& operator--()$/;"	f	class:rapidxml::node_iterator
operator ->	core/format/rapidxml/rapidxml_iterators.hpp	/^        pointer operator->() const$/;"	f	class:rapidxml::attribute_iterator
operator ->	core/format/rapidxml/rapidxml_iterators.hpp	/^        pointer operator->() const$/;"	f	class:rapidxml::node_iterator
operator <<	.recy/log/glog/logging.h	/^inline NullStream& operator<<(NullStream &str, const T &) { return str; }$/;"	f	namespace:google
operator <<	.recy/log/glog/logging.h	/^inline std::ostream& operator<<($/;"	f
operator <<	.recy/log/glog/stl_logging.h	/^inline std::ostream& operator<<(std::ostream& out,$/;"	f
operator <<	core/format/rapidxml/rapidxml_print.hpp	/^    inline std::basic_ostream<Ch> &operator <<(std::basic_ostream<Ch> &out, const xml_node<Ch> &node)$/;"	f	namespace:rapidxml
operator ==	core/format/rapidxml/rapidxml_iterators.hpp	/^        bool operator ==(const attribute_iterator<Ch> &rhs)$/;"	f	class:rapidxml::attribute_iterator
operator ==	core/format/rapidxml/rapidxml_iterators.hpp	/^        bool operator ==(const node_iterator<Ch> &rhs)$/;"	f	class:rapidxml::node_iterator
operator bool	.recy/log/glog/logging.h	/^  operator bool() const {$/;"	f	struct:google::CheckOpString
overflow	.recy/log/glog/logging.h	/^  virtual int_type overflow(int_type ch) {$/;"	f	class:google::base_logging::LogStreamBuf
package	protocol/ProtocolBase.cpp	/^	int CProtocolBase::package(int type,const OBJECT* src, char* &des)$/;"	f	class:NET::CProtocolBase
parent	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parent() const$/;"	f	class:rapidxml::xml_base
parse	core/format/XMLHelper.cpp	/^	BOOLEAN XMLHelper::parse(const CHAR* strContent)$/;"	f	class:NET::XMLHelper
parse	core/format/XMLhelper.cpp	/^	BOOLEAN XMLHelper::parse(const CHAR* strContent)$/;"	f	class:NET::XMLHelper
parse	core/format/rapidxml/rapidxml.hpp	/^        void parse(Ch *text)$/;"	f	class:rapidxml::xml_document
parseFrom	core/format/XMLHelper.cpp	/^	BOOLEAN	XMLHelper::parseFrom(const CHAR* strPath)$/;"	f	class:NET::XMLHelper
parseFrom	core/format/XMLhelper.cpp	/^	BOOLEAN	XMLHelper::parseFrom(const CHAR* strPath)$/;"	f	class:NET::XMLHelper
parse_and_append_data	core/format/rapidxml/rapidxml.hpp	/^        Ch parse_and_append_data(xml_node<Ch> *node, Ch *&text, Ch *contents_start)$/;"	f	class:rapidxml::xml_document
parse_bom	core/format/rapidxml/rapidxml.hpp	/^        void parse_bom(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_cdata	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parse_cdata(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_comment	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parse_comment(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_comment_nodes	core/format/rapidxml/rapidxml.hpp	/^    const int parse_comment_nodes = 0x40;$/;"	m	namespace:rapidxml
parse_declaration_node	core/format/rapidxml/rapidxml.hpp	/^    const int parse_declaration_node = 0x20;$/;"	m	namespace:rapidxml
parse_default	core/format/rapidxml/rapidxml.hpp	/^    const int parse_default = 0;$/;"	m	namespace:rapidxml
parse_doctype	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parse_doctype(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_doctype_node	core/format/rapidxml/rapidxml.hpp	/^    const int parse_doctype_node = 0x80;$/;"	m	namespace:rapidxml
parse_element	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parse_element(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_fastest	core/format/rapidxml/rapidxml.hpp	/^    const int parse_fastest = parse_non_destructive | parse_no_data_nodes;$/;"	m	namespace:rapidxml
parse_full	core/format/rapidxml/rapidxml.hpp	/^    const int parse_full = parse_declaration_node | parse_comment_nodes | parse_doctype_node | parse_pi_nodes | parse_validate_closing_tags;$/;"	m	namespace:rapidxml
parse_no_data_nodes	core/format/rapidxml/rapidxml.hpp	/^    const int parse_no_data_nodes = 0x1;            $/;"	m	namespace:rapidxml
parse_no_element_values	core/format/rapidxml/rapidxml.hpp	/^    const int parse_no_element_values = 0x2;$/;"	m	namespace:rapidxml
parse_no_entity_translation	core/format/rapidxml/rapidxml.hpp	/^    const int parse_no_entity_translation = 0x8;$/;"	m	namespace:rapidxml
parse_no_string_terminators	core/format/rapidxml/rapidxml.hpp	/^    const int parse_no_string_terminators = 0x4;$/;"	m	namespace:rapidxml
parse_no_utf8	core/format/rapidxml/rapidxml.hpp	/^    const int parse_no_utf8 = 0x10;$/;"	m	namespace:rapidxml
parse_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parse_node(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_node_attributes	core/format/rapidxml/rapidxml.hpp	/^        void parse_node_attributes(Ch *&text, xml_node<Ch> *node)$/;"	f	class:rapidxml::xml_document
parse_node_contents	core/format/rapidxml/rapidxml.hpp	/^        void parse_node_contents(Ch *&text, xml_node<Ch> *node)$/;"	f	class:rapidxml::xml_document
parse_non_destructive	core/format/rapidxml/rapidxml.hpp	/^    const int parse_non_destructive = parse_no_string_terminators | parse_no_entity_translation;$/;"	m	namespace:rapidxml
parse_normalize_whitespace	core/format/rapidxml/rapidxml.hpp	/^    const int parse_normalize_whitespace = 0x800;$/;"	m	namespace:rapidxml
parse_pi	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parse_pi(Ch *&text)$/;"	f	class:rapidxml::xml_document
parse_pi_nodes	core/format/rapidxml/rapidxml.hpp	/^    const int parse_pi_nodes = 0x100;$/;"	m	namespace:rapidxml
parse_trim_whitespace	core/format/rapidxml/rapidxml.hpp	/^    const int parse_trim_whitespace = 0x400;$/;"	m	namespace:rapidxml
parse_validate_closing_tags	core/format/rapidxml/rapidxml.hpp	/^    const int parse_validate_closing_tags = 0x200;$/;"	m	namespace:rapidxml
parse_xml_declaration	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *parse_xml_declaration(Ch *&text)$/;"	f	class:rapidxml::xml_document
pbase	.recy/log/glog/logging.h	/^    char* pbase() const { return streambuf_.pbase(); }$/;"	f	class:google::LogMessage::LogStream
pbase	.recy/log/glog/logging.h	/^  char* pbase() const { return std::streambuf::pbase(); }$/;"	f	class:google::base_logging::LogStreamBuf
pcount	.recy/log/glog/logging.h	/^    size_t pcount() const { return streambuf_.pcount(); }$/;"	f	class:google::LogMessage::LogStream
pcount	.recy/log/glog/logging.h	/^  size_t pcount() const { return pptr() - pbase(); }$/;"	f	class:google::base_logging::LogStreamBuf
pointer	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef typename xml_attribute<Ch> *pointer;$/;"	t	class:rapidxml::attribute_iterator
pointer	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef typename xml_node<Ch> *pointer;$/;"	t	class:rapidxml::node_iterator
port	core/socket/SocketServer.hpp	/^			int  			port() const					{ return m_serverPort; }$/;"	f	class:NET::CSocketServer
prepend_attribute	core/format/rapidxml/rapidxml.hpp	/^        void prepend_attribute(xml_attribute<Ch> *attribute)$/;"	f	class:rapidxml::xml_node
prepend_node	core/format/rapidxml/rapidxml.hpp	/^        void prepend_node(xml_node<Ch> *child)$/;"	f	class:rapidxml::xml_node
previous_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute<Ch> *previous_attribute(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_attribute
previous_begin	core/format/rapidxml/rapidxml.hpp	/^            char *previous_begin;$/;"	m	struct:rapidxml::memory_pool::header
previous_sibling	core/format/rapidxml/rapidxml.hpp	/^        xml_node<Ch> *previous_sibling(const Ch *name = 0, std::size_t name_size = 0, bool case_sensitive = true) const$/;"	f	class:rapidxml::xml_node
print	core/format/rapidxml/rapidxml_print.hpp	/^    inline OutIt print(OutIt out, const xml_node<Ch> &node, int flags = 0)$/;"	f	namespace:rapidxml
print	core/format/rapidxml/rapidxml_print.hpp	/^    inline std::basic_ostream<Ch> &print(std::basic_ostream<Ch> &out, const xml_node<Ch> &node, int flags = 0)$/;"	f	namespace:rapidxml
printListener	listener/Listener.cpp	/^	void CListener::printListener()$/;"	f	class:NET::CListener
print_attributes	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_attributes(OutIt out, const xml_node<Ch> *node, int flags)$/;"	f	namespace:rapidxml::internal
print_cdata_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_cdata_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_children	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_children(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_comment_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_comment_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_data_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_data_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_declaration_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_declaration_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_doctype_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_doctype_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_element_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_element_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_no_indenting	core/format/rapidxml/rapidxml_print.hpp	/^    const int print_no_indenting = 0x1;   \/\/!< Printer flag instructing the printer to suppress indenting of XML. See print() function.$/;"	m	namespace:rapidxml
print_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
print_pi_node	core/format/rapidxml/rapidxml_print.hpp	/^        inline OutIt print_pi_node(OutIt out, const xml_node<Ch> *node, int flags, int indent)$/;"	f	namespace:rapidxml::internal
protocol	client/Protocol.hpp	/^	int protocol;$/;"	m	struct:tagSocketHeader
protocol	protocol/IProtocol.hpp	/^			int protocol;$/;"	m	struct:NET::IProtocol::tagSocketHeader
rapidxml	core/format/rapidxml/rapidxml.hpp	/^namespace rapidxml$/;"	n
rapidxml	core/format/rapidxml/rapidxml_iterators.hpp	/^namespace rapidxml$/;"	n
rapidxml	core/format/rapidxml/rapidxml_print.hpp	/^namespace rapidxml$/;"	n
rapidxml	core/format/rapidxml/rapidxml_utils.hpp	/^namespace rapidxml$/;"	n
readProc	core/platform/multiplex/TypeDef.hpp	/^		::std::function<int(struct tagFileEvent*)> readProc;$/;"	m	struct:NET::tagFileEvent
reference	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef typename xml_attribute<Ch> &reference;$/;"	t	class:rapidxml::attribute_iterator
reference	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef typename xml_node<Ch> &reference;$/;"	t	class:rapidxml::node_iterator
reload	native/CMain.cpp	/^	void CMain::reload()$/;"	f	class:NET::CMain
remove_all_attributes	core/format/rapidxml/rapidxml.hpp	/^        void remove_all_attributes()$/;"	f	class:rapidxml::xml_node
remove_all_nodes	core/format/rapidxml/rapidxml.hpp	/^        void remove_all_nodes()$/;"	f	class:rapidxml::xml_node
remove_attribute	core/format/rapidxml/rapidxml.hpp	/^        void remove_attribute(xml_attribute<Ch> *where)$/;"	f	class:rapidxml::xml_node
remove_first_attribute	core/format/rapidxml/rapidxml.hpp	/^        void remove_first_attribute()$/;"	f	class:rapidxml::xml_node
remove_first_node	core/format/rapidxml/rapidxml.hpp	/^        void remove_first_node()$/;"	f	class:rapidxml::xml_node
remove_last_attribute	core/format/rapidxml/rapidxml.hpp	/^        void remove_last_attribute()$/;"	f	class:rapidxml::xml_node
remove_last_node	core/format/rapidxml/rapidxml.hpp	/^        void remove_last_node()$/;"	f	class:rapidxml::xml_node
remove_node	core/format/rapidxml/rapidxml.hpp	/^        void remove_node(xml_node<Ch> *where)$/;"	f	class:rapidxml::xml_node
resize	core/platform/multiplex/MultiKqueue.cpp	/^int CMultiKqueue::resize(int size)$/;"	f	class:CMultiKqueue
run	core/thread/ThreadBase.hpp	/^		void run(void* arg = NULL)$/;"	f	class:NET::CThreadBase
s_pInstance	native/CMain.cpp	/^	CMain* CMain::s_pInstance = NULL;$/;"	m	class:NET::CMain	file:
s_pInstance	native/CMain.hpp	/^			static CMain* 	s_pInstance;$/;"	m	class:NET::CMain
saveConfig	native/CMain.cpp	/^	void CMain::saveConfig()$/;"	f	class:NET::CMain
saveTo	core/format/XMLHelper.cpp	/^	BOOLEAN XMLHelper::saveTo(const CHAR* strPath)$/;"	f	class:NET::XMLHelper
saveTo	core/format/XMLhelper.cpp	/^	BOOLEAN XMLHelper::saveTo(const CHAR* strPath)$/;"	f	class:NET::XMLHelper
scheduling	listener/Listener.cpp	/^	IFileListener* CListener::scheduling(::std::list<IFileListener*>& lstListener)$/;"	f	class:NET::CListener
second	client/Protocol.hpp	/^	int second;$/;"	m	struct:tagSocketTime
second	protocol/ProtocolBase.hpp	/^				int second;$/;"	m	struct:NET::CProtocolBase::tagSocketTime
self	.recy/log/glog/logging.h	/^    LogStream* self() const { return self_; }$/;"	f	class:google::LogMessage::LogStream
self_	.recy/log/glog/logging.h	/^    LogStream *self_;  \/\/ Consistency check hack$/;"	m	class:google::LogMessage::LogStream
setDirection	core/log/Log.cpp	/^	void CLog::setDirection(LOG_LEVEL level, const char* strPath)$/;"	f	class:NET::CLog
setDirection	core/log/Log.cpp	/^	void CLog::setDirection(const char* strPath)$/;"	f	class:NET::CLog
setFilter	core/log/Log.cpp	/^	void CLog::setFilter(LOG_LEVEL level)$/;"	f	class:NET::CLog
setKeepAlive	core/socket/Socket.cpp	/^	void CSocket::setKeepAlive(bool on, int interval)$/;"	f	class:NET::CSocket
setNonBlock	.recy/Manager.cpp	/^void setNonBlock(int fd)$/;"	f
setNonBlock	listener/Listener.cpp	/^	void CListener::setNonBlock(int fd)$/;"	f	class:NET::CListener
setPort	core/socket/SocketServer.hpp	/^			void 			setPort(int iPort) 				{ m_serverPort = iPort; }$/;"	f	class:NET::CSocketServer
setReuseAddr	core/socket/Socket.cpp	/^	void CSocket::setReuseAddr(bool on)$/;"	f	class:NET::CSocket
setReusePort	core/socket/Socket.cpp	/^	void CSocket::setReusePort(bool on)$/;"	f	class:NET::CSocket
setRootElement	core/format/XMLHelper.hpp	/^			void					setRootElement(XMLElement* pElement)	{ m_pRootElement = pElement; }$/;"	f	class:NET::XMLHelper
setServerIP	core/socket/SocketServer.hpp	/^			void 			setServerIP(const char* ip)		{ strncpy(m_serverIp, ip, 16); }$/;"	f	class:NET::CSocketServer
setSize	core/platform/multiplex/MultiBase.cpp	/^	int CMultiBase::setSize(int size)$/;"	f	class:NET::CMultiBase
setSize	core/platform/multiplex/MultiEpoll.cpp	/^	int CMultiEpoll::setSize(int size)$/;"	f	class:NET::CMultiEpoll
setTimeOut	core/socket/Socket.cpp	/^	void CSocket::setTimeOut(int timeout)$/;"	f	class:NET::CSocket
set_allocator	core/format/rapidxml/rapidxml.hpp	/^        void set_allocator(alloc_func *af, free_func *ff)$/;"	f	class:rapidxml::memory_pool
set_ctr	.recy/log/glog/logging.h	/^    void set_ctr(int ctr) { ctr_ = ctr; }$/;"	f	class:google::LogMessage::LogStream
size	client/Protocol.hpp	/^	int size;$/;"	m	struct:tagSocketHeader
size	core/format/rapidxml/rapidxml_utils.hpp	/^        std::size_t size() const$/;"	f	class:rapidxml::file
size	core/platform/multiplex/TypeDef.hpp	/^		int size;$/;"	m	struct:NET::tagEventLoop
size	processor/Processor.hpp	/^			unsigned int 	size() const { return m_uiSize;	}$/;"	f	class:NET::CProcessor
size	protocol/IProtocol.hpp	/^			int size;$/;"	m	struct:NET::IProtocol::tagObject
size	protocol/IProtocol.hpp	/^			int size;$/;"	m	struct:NET::IProtocol::tagSocketHeader
skip	core/format/rapidxml/rapidxml.hpp	/^        static void skip(Ch *&text)$/;"	f	class:rapidxml::xml_document
skip_and_expand_character_refs	core/format/rapidxml/rapidxml.hpp	/^        static Ch *skip_and_expand_character_refs(Ch *&text)$/;"	f	class:rapidxml::xml_document
std	.recy/log/glog/stl_logging.h	/^namespace std { using ::operator<<; }$/;"	n
stderrthreshold	.recy/log/glog/logging.h	/^DECLARE_int32(stderrthreshold);$/;"	v
stop	core/thread/ThreadBase.hpp	/^		void stop()$/;"	f	class:NET::CThreadBase
stop_logging_if_full_disk	.recy/log/glog/logging.h	/^DECLARE_bool(stop_logging_if_full_disk);$/;"	v
str	.recy/log/glog/logging.h	/^    char* str() const { return pbase(); }$/;"	f	class:google::LogMessage::LogStream
str_	.recy/log/glog/logging.h	/^  std::string* str_;$/;"	m	struct:google::CheckOpString
stream	.recy/log/glog/logging.h	/^  NullStream &stream() { return *this; }$/;"	f	class:google::NullStream
stream_	.recy/log/glog/logging.h	/^  std::ostringstream *stream_;$/;"	m	class:google::base::CheckOpMessageBuilder
streambuf_	.recy/log/glog/logging.h	/^    base_logging::LogStreamBuf streambuf_;$/;"	m	class:google::LogMessage::LogStream
sync	client/Protocol.hpp	/^	int sync;$/;"	m	struct:tagSocketHeader
sync	protocol/IProtocol.hpp	/^			int sync;$/;"	m	struct:NET::IProtocol::tagSocketHeader
tagEventLoop	core/platform/multiplex/TypeDef.hpp	/^	typedef struct tagEventLoop {$/;"	s	namespace:NET
tagFileEvent	core/platform/multiplex/TypeDef.hpp	/^	typedef struct tagFileEvent {$/;"	s	namespace:NET
tagFiredEvent	core/platform/multiplex/TypeDef.hpp	/^	typedef struct tagFiredEvent {$/;"	s	namespace:NET
tagObject	protocol/IProtocol.hpp	/^			tagObject(int s) $/;"	f	struct:NET::IProtocol::tagObject
tagObject	protocol/IProtocol.hpp	/^		typedef struct tagObject$/;"	s	class:NET::IProtocol
tagSocketHeader	client/Protocol.hpp	/^typedef struct tagSocketHeader$/;"	s
tagSocketHeader	protocol/IProtocol.hpp	/^		typedef struct tagSocketHeader$/;"	s	class:NET::IProtocol
tagSocketHeart	client/Protocol.hpp	/^typedef struct tagSocketHeart$/;"	s
tagSocketHeart	protocol/ProtocolBase.hpp	/^			typedef struct tagSocketHeart$/;"	s	class:NET::CProtocolBase
tagSocketPing	client/Protocol.hpp	/^typedef struct tagSocketPing$/;"	s
tagSocketPing	protocol/ProtocolBase.hpp	/^			typedef struct tagSocketPing$/;"	s	class:NET::CProtocolBase
tagSocketTime	client/Protocol.hpp	/^typedef struct tagSocketTime$/;"	s
tagSocketTime	protocol/ProtocolBase.hpp	/^			typedef struct tagSocketTime$/;"	s	class:NET::CProtocolBase
tagSystemInfo	core/config/Config.hpp	/^			struct tagSystemInfo$/;"	s	class:NET::final
tagSystemInfo	native/CMain.hpp	/^			struct tagSystemInfo$/;"	s	class:NET::CMain
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::attribute_name_pred
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::attribute_value_pred
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::attribute_value_pure_pred
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::node_name_pred
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::text_pred
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::text_pure_no_ws_pred
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::text_pure_with_ws_pred
test	core/format/rapidxml/rapidxml.hpp	/^            static unsigned char test(Ch ch)$/;"	f	struct:rapidxml::xml_document::whitespace_pred
text_pred	core/format/rapidxml/rapidxml.hpp	/^        struct text_pred$/;"	s	class:rapidxml::xml_document
text_pure_no_ws_pred	core/format/rapidxml/rapidxml.hpp	/^        struct text_pure_no_ws_pred$/;"	s	class:rapidxml::xml_document
text_pure_with_ws_pred	core/format/rapidxml/rapidxml.hpp	/^        struct text_pure_with_ws_pred$/;"	s	class:rapidxml::xml_document
time	client/Protocol.hpp	/^	int time;$/;"	m	struct:tagSocketHeart
time	protocol/ProtocolBase.hpp	/^				int time;$/;"	m	struct:NET::CProtocolBase::tagSocketHeart
type	client/Protocol.hpp	/^	int type;$/;"	m	struct:tagSocketHeart
type	client/Protocol.hpp	/^	int type;$/;"	m	struct:tagSocketTime
type	core/format/rapidxml/rapidxml.hpp	/^        node_type type() const$/;"	f	class:rapidxml::xml_node
type	core/format/rapidxml/rapidxml.hpp	/^        void type(node_type type)$/;"	f	class:rapidxml::xml_node
type	protocol/ProtocolBase.hpp	/^				int type;$/;"	m	struct:NET::CProtocolBase::tagSocketHeart
type	protocol/ProtocolBase.hpp	/^				int type;$/;"	m	struct:NET::CProtocolBase::tagSocketTime
uint32	.recy/log/glog/logging.h	/^typedef uint32_t uint32;$/;"	t	namespace:google
uint64	.recy/log/glog/logging.h	/^typedef uint64_t uint64;$/;"	t	namespace:google
unInitialize	native/CMain.cpp	/^	void CMain::unInitialize()$/;"	f	class:NET::CMain
v	.recy/log/glog/logging.h	/^DECLARE_int32(v);  \/\/ in vlog_is_on.cc$/;"	v
value	core/format/rapidxml/rapidxml.hpp	/^        Ch *value() const$/;"	f	class:rapidxml::xml_base
value	core/format/rapidxml/rapidxml.hpp	/^        void value(const Ch *value)$/;"	f	class:rapidxml::xml_base
value	core/format/rapidxml/rapidxml.hpp	/^        void value(const Ch *value, std::size_t size)$/;"	f	class:rapidxml::xml_base
value_size	core/format/rapidxml/rapidxml.hpp	/^        std::size_t value_size() const$/;"	f	class:rapidxml::xml_base
value_type	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef typename xml_attribute<Ch> value_type;$/;"	t	class:rapidxml::attribute_iterator
value_type	core/format/rapidxml/rapidxml_iterators.hpp	/^        typedef typename xml_node<Ch> value_type;$/;"	t	class:rapidxml::node_iterator
whitespace_pred	core/format/rapidxml/rapidxml.hpp	/^        struct whitespace_pred$/;"	s	class:rapidxml::xml_document
writeProc	core/platform/multiplex/TypeDef.hpp	/^		::std::function<int(struct tagFileEvent*)> writeProc;$/;"	m	struct:NET::tagFileEvent
xml_attribute	core/format/rapidxml/rapidxml.hpp	/^        xml_attribute()$/;"	f	class:rapidxml::xml_attribute
xml_attribute	core/format/rapidxml/rapidxml.hpp	/^    class xml_attribute: public xml_base<Ch>$/;"	c	namespace:rapidxml
xml_base	core/format/rapidxml/rapidxml.hpp	/^        xml_base()$/;"	f	class:rapidxml::xml_base
xml_base	core/format/rapidxml/rapidxml.hpp	/^    class xml_base$/;"	c	namespace:rapidxml
xml_document	core/format/rapidxml/rapidxml.hpp	/^        xml_document()$/;"	f	class:rapidxml::xml_document
xml_document	core/format/rapidxml/rapidxml.hpp	/^    class xml_document: public xml_node<Ch>, public memory_pool<Ch>$/;"	c	namespace:rapidxml
xml_node	core/format/rapidxml/rapidxml.hpp	/^        xml_node(node_type type)$/;"	f	class:rapidxml::xml_node
xml_node	core/format/rapidxml/rapidxml.hpp	/^    class xml_node: public xml_base<Ch>$/;"	c	namespace:rapidxml
~CConfig	core/config/Config.cpp	/^	CConfig::~CConfig()$/;"	f	class:NET::CConfig
~CListener	listener/Listener.cpp	/^	CListener::~CListener()$/;"	f	class:NET::CListener
~CLog	core/log/Log.hpp	/^			~CLog() {};$/;"	f	class:NET::CLog
~CMain	native/CMain.cpp	/^	CMain::~CMain()$/;"	f	class:NET::CMain
~CMultiBase	core/platform/multiplex/MultiBase.cpp	/^	CMultiBase::~CMultiBase()$/;"	f	class:NET::CMultiBase
~CMultiEpoll	core/platform/multiplex/MultiEpoll.cpp	/^	CMultiEpoll::~CMultiEpoll()$/;"	f	class:NET::CMultiEpoll
~CMultiKqueue	core/platform/multiplex/MultiKqueue.cpp	/^CMultiKqueue::~CMultiKqueue()$/;"	f	class:CMultiKqueue
~CProcessor	processor/Processor.cpp	/^	CProcessor::~CProcessor()$/;"	f	class:NET::CProcessor
~CProtocolBase	protocol/ProtocolBase.cpp	/^	CProtocolBase::~CProtocolBase()$/;"	f	class:NET::CProtocolBase
~CSocket	core/socket/Socket.cpp	/^	CSocket::~CSocket()$/;"	f	class:NET::CSocket
~CSocketServer	core/socket/SocketServer.cpp	/^	CSocketServer::~CSocketServer()$/;"	f	class:NET::CSocketServer
~CThreadBase	core/thread/ThreadBase.hpp	/^		virtual ~CThreadBase() $/;"	f	class:NET::CThreadBase
~NullStreamFatal	.recy/log/glog/logging.h	/^  __attribute__ ((noreturn)) ~NullStreamFatal() throw () { _exit(1); }$/;"	f	class:google::NullStreamFatal
~XMLHelper	core/format/XMLHelper.cpp	/^	XMLHelper::~XMLHelper()$/;"	f	class:NET::XMLHelper
~XMLHelper	core/format/XMLhelper.cpp	/^	virtual XMLHelper::~XMLHelper()$/;"	f	class:NET::XMLHelper
~memory_pool	core/format/rapidxml/rapidxml.hpp	/^        ~memory_pool()$/;"	f	class:rapidxml::memory_pool
~tagObject	protocol/IProtocol.hpp	/^			~tagObject() $/;"	f	struct:NET::IProtocol::tagObject
